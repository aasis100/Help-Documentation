{
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppArray.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppArray.html",
    "title": "Class AppArray | ASE Assignment",
    "keywords": "Class AppArray Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents an application array that supports operations on integer and real arrays. Inherits from the Evaluation class. public class AppArray : Evaluation, ICommand Inheritance object Command Evaluation AppArray Implements ICommand Derived AppPeek AppPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppArray() Initializes a new instance of the AppArray class. public AppArray() Fields IntValue Stores integer value during operations. protected int IntValue Field Value int PEEK Constant for peek operation (false). protected const bool PEEK = false Field Value bool POKE Constant for poke operation (true). public const bool POKE = true Field Value bool RealValue Stores real value during operations. protected double RealValue Field Value double columnCurrent Current column index. protected int columnCurrent Field Value int columnExpression Expression for the column index. protected string columnExpression Field Value string columnsCount Number of columns in the array. Default is 1. protected int columnsCount Field Value int intArray 2D array for storing integer values. protected int[,] intArray Field Value int[,] peekValue Value for peek operation. protected string peekValue Field Value string pokeValue Value for poke operation. protected string pokeValue Field Value string realArray 2D array for storing real values. protected double[,] realArray Field Value double[,] rowCurrent Current row index. protected int rowCurrent Field Value int rowExpression Expression for the row index. protected string rowExpression Field Value string rowsCount Number of rows in the array. protected int rowsCount Field Value int type Type of the array (\"int\" or \"real\"). protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Enforces restrictions on array operations. public void ArrayRestrictions() CheckParameters(string[]) Checks the validity of the array parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Array parameter list as a string array. Compile() Compiles the array definition and validates parameters. public override void Compile() Execute() Executes the array initialization. public override void Execute() GetIntArray(int, int) Gets the value of an integer array at a specific index. public virtual int GetIntArray(int row, int col) Parameters row int The row index. col int The column index. Returns int The value at the specified index. GetRealArray(int, int) Gets the value of a real array at a specific index. public virtual double GetRealArray(int row, int col) Parameters row int The row index. col int The column index. Returns double The value at the specified index. ProcessArrayParametersCompile(bool) Processes array parameters during compilation. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates if the operation is a poke operation. ProcessArrayParametersExecute(bool) Processes array parameters during execution. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates if the operation is a poke operation. ReduceRestrictionCounter() Reduces the restriction counter for array operations. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets the value of an integer array at a specific index. public virtual void SetIntArray(int value, int row, int col) Parameters value int The value to set. row int The row index. col int The column index. SetRealArray(double, int, int) Sets the value of a real array at a specific index. public virtual void SetRealArray(double value, int row, int col) Parameters value double The value to set. row int The row index. col int The column index."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppBoolean.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppBoolean.html",
    "title": "Class AppBoolean | ASE Assignment",
    "keywords": "Class AppBoolean Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a Boolean class that extends the BOOSE.Boolean class. public class AppBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean AppBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Enforces restrictions specific to the AppBoolean class. public override void Restrictions()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppCanvas.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppCanvas.html",
    "title": "Class AppCanvas | ASE Assignment",
    "keywords": "Class AppCanvas Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods for drawing various shapes (lines, circles, rectangles, triangles) and text on a canvas represented by a bitmap. It supports operations such as setting the pen color and size, moving the pen to a new position, and resetting the canvas to its initial state. The canvas is defined by a width (XSIDE) and height (YSIDE), which are used to constrain drawing operations within the canvas boundaries. The class utilizes the Graphics object to perform rendering on the canvas. Constructors AppCanvas() Initializes a new instance of the MyAppCanvas class with default canvas size. public AppCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. PenSize Gets or sets the pen size, which determines the thickness of the lines drawn. public int PenSize { get; set; } Property Value int The pen size, which is a positive integer. It determines how thick the lines will appear on the canvas. A value greater than zero is required. If the value is zero or negative, an exception will be thrown. Exceptions CanvasException Thrown when the pen size is set to a value less than or equal to zero. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). Any previous drawing operations will not be affected, but the next drawing operations will begin from the top-left corner of the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppCast.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppCast.html",
    "title": "Class AppCast | ASE Assignment",
    "keywords": "Class AppCast Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a casting command to convert between different variable types. public class AppCast : Command, ICommand Inheritance object Command AppCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters passed for the casting operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] Array of parameters to validate. Exceptions CommandException Thrown when the number of parameters is not equal to two. Compile() Compiles the casting operation by verifying the existence and compatibility of variables. public override void Compile() Exceptions CommandException Thrown when variables do not exist or the source is a real type. Execute() Executes the casting operation by converting the source integer value to the target real value. public override void Execute()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppCircle.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppCircle.html",
    "title": "Class AppCircle | ASE Assignment",
    "keywords": "Class AppCircle Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class AppCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCircle() Initializes a new instance of the AppCircle class. public AppCircle() AppCircle(Canvas, int) Initializes a new instance of the AppCircle class with a specified canvas and radius. public AppCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. Exceptions RestrictionException Thrown when the radius exceeds the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw a circle. public override void Execute() Exceptions RestrictionException Thrown when the radius exceeds the allowed limit of 2000. CommandException Thrown when an unexpected error occurs."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppCommandFactory.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE Assignment",
    "keywords": "Class AppCommandFactory Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates a specific BOOSE.ICommand based on the provided command string. The method checks the command string and returns the corresponding ICommand object. If the command is invalid, a FactoryException is caught, logged, and handled safely. public override ICommand MakeCommand(string command) Parameters command string The command string to create a corresponding ICommand. Returns ICommand An BOOSE.ICommand corresponding to the provided command string, or null if the command is invalid."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppConditionalCommand.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppConditionalCommand.html",
    "title": "Class AppConditionalCommand | ASE Assignment",
    "keywords": "Class AppConditionalCommand Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class AppConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand Implements ICommand Derived ApplicationCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command and resets the private static field to 0. public override void Execute() Examples var command = new AppConditionalCommand(); command.Execute(); Remarks This method overrides the BOOSE.ConditionalCommand.Execute() method to include resetting the value of the private static field 꿁 to 0 after executing the base command. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var command = new AppConditionalCommand(); command.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 뇀 in the BOOSE.Boolean class using reflection Exceptions BOOSEException Thrown when the private field 뇀 cannot be accessed using reflection."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppDrawTo.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppDrawTo.html",
    "title": "Class AppDrawTo | ASE Assignment",
    "keywords": "Class AppDrawTo Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class AppDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppDrawTo() Initializes a new instance of the AppDrawTo class. public AppDrawTo() AppDrawTo(Canvas, int, int) Initializes a new instance of the AppDrawTo class with a specified canvas and coordinates. public AppDrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the drawing will occur. x int The x-coordinate to draw to. y int The y-coordinate to draw to. Exceptions RestrictionException Thrown when coordinates are invalid (e.g., negative). Methods CheckParameters(string[]) Validates the parameters for the draw-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw to the specified position. public override void Execute() Exceptions CommandException Thrown when an unexpected error occurs during execution."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppElse.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppElse.html",
    "title": "Class AppElse | ASE Assignment",
    "keywords": "Class AppElse Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the Else command in the application, which is a compound command that handles conditional branching in the program. public class AppElse : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppElse Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppElse() Initializes a new instance of the AppElse class. public AppElse() Properties CorrespondingEnd Gets or sets the corresponding End command. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Checks the parameters for the Else command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to validate. Exceptions CommandException Thrown when the parameters are invalid for the Else command. Compile() Compiles the Else command by linking it to the corresponding command in the program. public override void Compile() Execute() Executes the Else command by modifying the program counter if the condition of the corresponding command is true. public override void Execute()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppEnd.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppEnd.html",
    "title": "Class AppEnd | ASE Assignment",
    "keywords": "Class AppEnd Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the End command in the application, which serves as a terminator for control structures like If, While, and For loops. public class AppEnd : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppEnd Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppEnd() Initializes a new instance of the AppEnd class. public AppEnd() Methods Compile() Compiles the End command by linking it to the corresponding control command (e.g., If, While, For). public override void Compile() Exceptions CommandException Thrown when the syntax does not match the expected structure for the corresponding command. Execute() Executes the End command, which modifies the program counter based on the type of the corresponding command. public override void Execute() Exceptions CommandException Thrown when the loop control variable does not exist or the loop step is invalid."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppFor.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppFor.html",
    "title": "Class AppFor | ASE Assignment",
    "keywords": "Class AppFor Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the overridden logic and resets the private static field to 0. public override void Execute() Examples var appFor = new AppFor(); appFor.Execute(); Remarks This method overrides the BOOSE.For.Execute() method to include resetting the private static field 꿁 to 0 after executing the base logic. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appFor = new AppFor(); appFor.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 뇀 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 뇀 cannot be accessed using reflection."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppIf.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppIf.html",
    "title": "Class AppIf | ASE Assignment",
    "keywords": "Class AppIf Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the If command in the application, which allows conditional execution of code blocks. public class AppIf : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppIf Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppIf() Initializes a new instance of the AppIf class. public AppIf() Methods ReduceRestrictions() Reduces restrictions applied to the If command. protected void ReduceRestrictions()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppInt.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppInt.html",
    "title": "Class AppInt | ASE Assignment",
    "keywords": "Class AppInt Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents an integer type command in the application, extending the BOOSE.Int class. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Enforces restrictions specific to the AppInt class. public override void Restrictions()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppMoveTo.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppMoveTo.html",
    "title": "Class AppMoveTo | ASE Assignment",
    "keywords": "Class AppMoveTo Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class AppMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppMoveTo() Initializes a new instance of the AppMoveTo class. public AppMoveTo() AppMoveTo(Canvas, int, int) Initializes a new instance of the AppMoveTo class with a specified canvas and coordinates. public AppMoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the move operation will occur. x int The x-coordinate to move to. y int The y-coordinate to move to. Exceptions RestrictionException Thrown when coordinates exceed the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to move to the specified position. public override void Execute() Exceptions RestrictionException Thrown when the coordinates exceed the allowed limit of 2000. CommandException Thrown when an unexpected error occurs during execution."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppPeek.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppPeek.html",
    "title": "Class AppPeek | ASE Assignment",
    "keywords": "Class AppPeek Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the Peek command, which retrieves a value from an array without modifying it. Inherits functionality from the AppArray class. public class AppPeek : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPeek Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPeek() Initializes a new instance of the AppPeek class. public AppPeek() Methods CheckParameters(string[]) Validates the parameters for the Peek command. public override void CheckParameters(string[] parameters) Parameters parameters string[] Array of parameters to validate. Exceptions NotImplementedException Thrown because parameter validation is not implemented. Compile() Compiles the Peek command by processing the array parameters for a read operation. public override void Compile() Execute() Executes the Peek command by retrieving the value from the array and updating the program variable. public override void Execute() Exceptions CommandException Thrown if the array type is unsupported."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppPenColour.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppPenColour.html",
    "title": "Class AppPenColour | ASE Assignment",
    "keywords": "Class AppPenColour Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class AppPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters AppPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPenColour() Initializes a new instance of the AppPenColour class. public AppPenColour() AppPenColour(Canvas, int, int, int) Initializes a new instance of the AppPenColour class with a specified canvas and color parameters. public AppPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas on which the pen color operation will occur. r int The red component of the pen color. g int The green component of the pen color. b int The blue component of the pen color. Exceptions RestrictionException Thrown when any color component exceeds the allowed limits (0-255). Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to set the pen color. public override void Execute() Exceptions RestrictionException Thrown when the color components are out of the allowed range (0-255). CommandException Thrown when an unexpected error occurs during execution."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppPoke.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppPoke.html",
    "title": "Class AppPoke | ASE Assignment",
    "keywords": "Class AppPoke Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the Poke command, which updates a specific value in an array. Inherits functionality from the AppArray class. public class AppPoke : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPoke Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPoke() Initializes a new instance of the AppPoke class. public AppPoke() Methods CheckParameters(string[]) Validates the parameters for the Poke command. public override void CheckParameters(string[] parameter) Parameters parameter string[] Array of parameters to validate. Exceptions CommandException Thrown when the number of parameters is invalid. Compile() Compiles the Poke command by processing the array parameters for a write operation. public override void Compile() Execute() Executes the Poke command by updating the value in the array at the specified location. public override void Execute() Set(StoredProgram, string) Sets the program and parameter list for the Poke command. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The program context for the command. paramsList string The parameter list as a string."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppPraser.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppPraser.html",
    "title": "Class AppPraser | ASE Assignment",
    "keywords": "Class AppPraser Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a custom parser for interpreting and compiling commands in a stored program. public class AppPraser : IParser Inheritance object AppPraser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppPraser(CommandFactory, StoredProgram) Initializes a new instance of the AppPraser class. public AppPraser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The command factory for creating commands. program StoredProgram The stored program being parsed. Methods ParseCommand(string) Parses a single command line into an ICommand object. public virtual ICommand ParseCommand(string line) Parameters line string The line of code to parse. Returns ICommand An ICommand object representing the parsed command. Exceptions ParserException Thrown when a variable does not exist or has an unknown type. ParseProgram(string) Parses an entire program from a string representation. public virtual void ParseProgram(string program) Parameters program string The program as a string."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppReal.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppReal.html",
    "title": "Class AppReal | ASE Assignment",
    "keywords": "Class AppReal Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a real number type command in the application, extending the BOOSE.Real class. public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Enforces restrictions specific to the AppReal class. public override void Restrictions()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppRectangle.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppRectangle.html",
    "title": "Class AppRectangle | ASE Assignment",
    "keywords": "Class AppRectangle Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class AppRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppRectangle() Initializes a new instance of the AppRectangle class. public AppRectangle() AppRectangle(Canvas, int, int) Initializes a new instance of the AppRectangle class with a specified canvas, width, and height. public AppRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. Exceptions RestrictionException Thrown when width or height exceed the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw the rectangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown when the width or height exceeds the allowed limit of 2000. CommandException Thrown when an unexpected error occurs during execution."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppWhile.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.AppWhile.html",
    "title": "Class AppWhile | ASE Assignment",
    "keywords": "Class AppWhile Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the While command in the application, which facilitates loop execution based on a condition. Inherits functionality from the ApplicationCompoundCommand class. public class AppWhile : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppWhile Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWhile() Initializes a new instance of the AppWhile class. public AppWhile() Methods ReduceRestrictions() Reduces restrictions applied to the While command. protected void ReduceRestrictions()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.ApplicationCompoundCommand.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.ApplicationCompoundCommand.html",
    "title": "Class ApplicationCompoundCommand | ASE Assignment",
    "keywords": "Class ApplicationCompoundCommand Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class ApplicationCompoundCommand : AppConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand Implements ICommand Derived AppElse AppEnd AppIf AppWhile Inherited Members AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationCompoundCommand() Initializes a new instance of the ApplicationCompoundCommand class without instance restrictions. public ApplicationCompoundCommand() Remarks This constructor removes any restrictions on the number of instances that can be created, enabling flexible use of compound commands. Properties CorrespondingCommand Gets or sets the corresponding conditional command associated with this compound command. public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Remarks This property is used to establish a link between the compound command and its parent control flow command. For example, an \"if-end\" command will link to its \"if\" block. Methods CheckParameters(string[]) Validates the parameters passed to the compound command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to validate. Remarks This method ensures that the compound command is associated with a valid control flow structure. It validates the following: Only one parameter is passed. The parameter contains an expected \"end\" marker, such as \"ifEnd\", \"whileEnd\", \"forEnd\", or \"methodEnd\". If the validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter count is invalid or the parameter does not contain a valid \"end\" marker. Compile() Compiles the compound command to prepare it for execution. public override void Compile() Remarks This method calls the base BOOSE.ConditionalCommand.Compile() method to handle any setup or preparation required before the command is executed. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 뇀 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 뇀 cannot be accessed using reflection."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.ApplicationMethod.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.ApplicationMethod.html",
    "title": "Class ApplicationMethod | ASE Assignment",
    "keywords": "Class ApplicationMethod Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class ApplicationMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method ApplicationMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationMethod() Initializes a new instance of the ApplicationMethod class. public ApplicationMethod() Examples var appMethod = new AppMethod(); Remarks The constructor overrides restrictions on method count by invoking ReduceRestrictions twice. It also resets the counts for the fields 꿁 and 꿒 to 0. Methods ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 뇀 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 뇀 cannot be accessed using reflection. ResetOrDecreaseMethodCount(int) Resets or decreases the value of a private static field in the BOOSE.Method class. public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseMethodCount(10); Remarks This method accesses the private static field 뇔 in the BOOSE.Method class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 뇔 cannot be accessed using reflection."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.Clear.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.Clear.html",
    "title": "Class Clear | ASE Assignment",
    "keywords": "Class Clear Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Clear() Initializes a new instance of the Clear class with default values. public Clear() Remarks This constructor is used when no specific canvas reference is needed to initialize the command. The Canvas object will be provided when the Execute() method is called. Clear(Canvas) Initializes a new instance of the Clear class with a specified Canvas. public Clear(Canvas c) Parameters c Canvas The BOOSE.Canvas object on which the clear operation will be performed. Remarks This constructor is used when the command is initialized with a known Canvas object that the operation will affect. Methods CheckParameters(string[]) Checks the parameters provided for the Clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters. This list is ignored since no parameters are required for the Clear command. Remarks Since the Clear command does not take any parameters, this method does not perform any validation. It remains empty to ensure that no unexpected behavior occurs when no parameters are provided. Execute() Executes the Clear command to clear the contents of the Canvas. public override void Execute() Examples The following example demonstrates how to use the Clear class: Canvas myCanvas = new Canvas(); Clear clearCommand = new Clear(myCanvas); clearCommand.Execute(); // Clears the canvas Remarks The Execute() method calls the Canvas' BOOSE.Canvas.Clear() method to clear the canvas. Since this command does not require parameters, no validation is necessary for execution."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.Fill.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.Fill.html",
    "title": "Class Fill | ASE Assignment",
    "keywords": "Class Fill Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class Fill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Fill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Fill() Initializes a new instance of the Fill class with default values. public Fill() Remarks This constructor can be used when no initial text value is provided. The text can be set later using the Execute() method. Fill(Canvas, string) Initializes a new instance of the Fill class with a specified Canvas and text value. public Fill(Canvas c, string text) Parameters c Canvas The BOOSE.Canvas object on which the fill state will be applied. text string A string representing the fill state, either \"true\" or \"false\". Remarks Use this constructor when creating the Fill command with a known text value and Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the Fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the fill state (\"true\" or \"false\"). Examples The following example demonstrates parameter validation: Fill fillCommand = new Fill(); fillCommand.CheckParameters(new string[] { \"true\" }); // No exception fillCommand.CheckParameters(new string[] { \"true\", \"false\" }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly one parameter. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly one parameter. Execute() Executes the Fill command to set the fill state of a shape on the Canvas. public override void Execute() Examples The following example demonstrates how to use the Fill class: Canvas myCanvas = new Canvas(); Fill fillCommand = new Fill(myCanvas, \"true\"); fillCommand.Execute(); Remarks The method performs the following steps: Extracts the text parameter from the base class. Validates the text value to ensure it is not null, empty, or exceeding 5 characters. Calls the SetFilled(string) method to apply the fill state. If the text value is invalid, a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the text value is null, empty, whitespace, or exceeds 5 characters. SetFilled(string) Sets the filled state of the shape using a string value (\"true\" or \"false\"). public void SetFilled(string isFilledStr) Parameters isFilledStr string A string value (\"true\" or \"false\") indicating whether the shape is filled. Remarks This method updates the global configuration to enable or disable filling based on the provided value. Exceptions CommandException Thrown when the string value is neither \"true\" nor \"false\"."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.Form1.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.Form1.html",
    "title": "Class Form1 | ASE Assignment",
    "keywords": "Class Form1 Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.GlobalConfig.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.GlobalConfig.html",
    "title": "Class GlobalConfig | ASE Assignment",
    "keywords": "Class GlobalConfig Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class GlobalConfig Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled Gets or sets the filled status, which determines whether shapes should be filled or not. public static bool IsFillEnabled { get; set; } Property Value bool A boolean value indicating the filled status. The default value is false. MaxX public static int MaxX { get; set; } Property Value int MaxY public static int MaxY { get; set; } Property Value int PenSize public static int PenSize { get; set; } Property Value int"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.MyStoredProgram.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.MyStoredProgram.html",
    "title": "Class MyStoredProgram | ASE Assignment",
    "keywords": "Class MyStoredProgram Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a stored program that can execute commands on a canvas. Provides support for variables, methods, expressions, and conditional commands. public class MyStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram MyStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyStoredProgram(ICanvas) Initializes a new instance of the MyStoredProgram class. public MyStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas on which the program will operate. Fields SyntaxOk Indicates whether the program syntax is valid. public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter. public override int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the program. public override int Add(Command C) Parameters C Command The command to add. Returns int The index of the added command. Exceptions StoredProgramException Thrown if the command is null. AddMethod(Method) Adds a method to the program. public override void AddMethod(Method M) Parameters M Method The method to add. AddVariable(Evaluation) Adds a variable to the program. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. Commandsleft() Determines whether there are commands left to execute. public override bool Commandsleft() Returns bool True if there are commands left; otherwise, false. DeleteVariable(string) Deletes a variable by its name. public override void DeleteVariable(string varName) Parameters varName string The name of the variable to delete. EvaluateExpression(string) Evaluates a mathematical or logical expression and returns the result as a string. public override string EvaluateExpression(string Exp) Parameters Exp string The expression to evaluate. Returns string The result of the evaluation. Exceptions StoredProgramException Thrown if the expression syntax is invalid. EvaluateExpressionWithString(string) Evaluates an expression with string concatenation and returns the result. public override string EvaluateExpressionWithString(string expression) Parameters expression string The expression to evaluate. Returns string The result of the evaluation as a string. FindVariable(string) Finds the index of a variable by its name. public override int FindVariable(string varName) Parameters varName string The name of the variable to find. Returns int The index of the variable, or -1 if not found. GetMethod(string) Retrieves a method by its name. public override Method GetMethod(string MethodName) Parameters MethodName string The name of the method to retrieve. Returns Method The requested method. Exceptions StoredProgramException Thrown if the method is not found. GetVarValue(string) Retrieves the value of a variable as a string. public override string GetVarValue(string varName) Parameters varName string The name of the variable. Returns string The value of the variable. Exceptions StoredProgramException Thrown if the variable is not found. GetVariable(int) Retrieves a variable by its index. public override Evaluation GetVariable(int index) Parameters index int The index of the variable to retrieve. Returns Evaluation The requested variable. Exceptions StoredProgramException Thrown if the index is invalid. GetVariable(string) Retrieves a variable by its name. public override Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable to retrieve. Returns Evaluation The requested variable. Exceptions StoredProgramException Thrown if the variable is not found. IsExpression(string) Determines whether a string is a valid expression. public override bool IsExpression(string expression) Parameters expression string The expression to check. Returns bool True if the expression is valid; otherwise, false. NextCommand() Retrieves the next command to execute and increments the program counter. public override object NextCommand() Returns object The next command to execute. Pop() Pops a conditional command from the stack. public override ConditionalCommand Pop() Returns ConditionalCommand The popped conditional command. Exceptions StoredProgramException Thrown if the stack is empty. Push(ConditionalCommand) Pushes a conditional command onto the stack. public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The conditional command to push. ResetProgram() Resets the program, clearing variables, methods, and conditional commands. public virtual void ResetProgram() Run() Executes all commands in the program sequentially. public override void Run() UpdateVariable(string, bool) Updates the value of a boolean variable. public override void UpdateVariable(string varName, bool value) Parameters varName string The name of the variable to update. value bool The new value. Exceptions CommandException Thrown if the variable is not of type boolean. UpdateVariable(string, double) Updates the value of a real variable. public override void UpdateVariable(string varName, double value) Parameters varName string The name of the variable to update. value double The new value. Exceptions CommandException Thrown if the variable is not of type real. UpdateVariable(string, int) Updates the value of an integer variable. public override void UpdateVariable(string varName, int value) Parameters varName string The name of the variable to update. value int The new value. VariableExists(string) Checks if a variable with the specified name exists. public override bool VariableExists(string varName) Parameters varName string The name of the variable to check. Returns bool True if the variable exists; otherwise, false."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.PenSize.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.PenSize.html",
    "title": "Class PenSize | ASE Assignment",
    "keywords": "Class PenSize Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. public class PenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter PenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The PenSize class is responsible for validating and applying the pen size. It ensures the pen size: Is a non-negative integer. Does not exceed 100. If validation fails, a BOOSE.RestrictionException is thrown. Constructors PenSize() Initializes a new instance of the PenSize class with default values. public PenSize() Remarks This default constructor can be used when no initial pen size is provided. The pen size can be set later using the Execute() method. PenSize(Canvas, int) Initializes a new instance of the PenSize class with a specified Canvas and pen size. public PenSize(Canvas c, int pensize) Parameters c Canvas The BOOSE.Canvas object where the pen size will be applied. pensize int The desired pen size to be set. Remarks Use this constructor when creating the command with a known pen size and a Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the PenSize command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the pen size. Examples The following example demonstrates parameter validation: PenSize penSizeCommand = new PenSize(); penSizeCommand.CheckParameters(new string[] { \"10\" }); // No exception penSizeCommand.CheckParameters(new string[] { }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly one parameter. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly 1 parameter. Execute() Executes the PenSize command to set the pen size on the Canvas. public override void Execute() Examples The following example demonstrates how to use the PenSize class: Canvas myCanvas = new Canvas(); PenSize penSizeCommand = new PenSize(myCanvas, 10); penSizeCommand.Execute(); Remarks The method performs the following steps: Extracts the pen size parameter from the base class. Validates that the pen size is within the valid range (0 to 100). Sets the pen size using the SetPenSize(int) method. If the pen size is invalid (either too large or negative), a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the pen size exceeds 100 or is negative. SetPenSize(int) Sets the pen size using an integer argument. public void SetPenSize(int penSize) Parameters penSize int The pen size to set. Must be a non-negative integer. Remarks This method updates the global pen size setting in the application."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.Reset.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.Reset.html",
    "title": "Class Reset | ASE Assignment",
    "keywords": "Class Reset Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reset() Initializes a new instance of the Reset class with default values. public Reset() Remarks This constructor is used when no specific Canvas reference is needed to initialize the command. The Canvas object will be provided when the Execute() method is called. Reset(Canvas) Initializes a new instance of the Reset class with a specified Canvas. public Reset(Canvas c) Parameters c Canvas The BOOSE.Canvas object on which the reset operation will be performed. Remarks This constructor is used when the command is initialized with a known Canvas object that the operation will affect. Methods CheckParameters(string[]) Checks the parameters provided for the Reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters. This list is ignored since no parameters are required for the Reset command. Remarks Since the Reset command does not take any parameters, this method does not perform any validation. It remains empty to ensure that no unexpected behavior occurs when no parameters are provided. Execute() Executes the Reset command to reset the Canvas to its initial state. public override void Execute() Examples The following example demonstrates how to use the Reset class: Canvas myCanvas = new Canvas(); Reset resetCommand = new Reset(myCanvas); resetCommand.Execute(); // Resets the canvas to its initial state Remarks The Execute() method calls the Canvas' BOOSE.Canvas.Reset() method to reset the canvas. Since this command does not require parameters, no validation is necessary for execution."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.Triangle.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.Triangle.html",
    "title": "Class Triangle | ASE Assignment",
    "keywords": "Class Triangle Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Triangle() Initializes a new instance of the Triangle class with default values. public Triangle() Remarks This default constructor can be used to create an instance of the class without specifying initial values for parameters. Parameters can be assigned later. Triangle(Canvas, int, int) Initializes a new instance of the Triangle class with specified Canvas, base length, and height. public Triangle(Canvas c, int baseLength, int height) Parameters c Canvas The BOOSE.Canvas object on which the triangle will be drawn. baseLength int The base length of the triangle. height int The height of the triangle. Remarks Use this constructor when creating the triangle command with known dimensions and a Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the Triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing base length and height. Examples The following example demonstrates parameter validation: Triangle triangleCommand = new Triangle(); triangleCommand.CheckParameters(new string[] { \"500\", \"300\" }); // No exception triangleCommand.CheckParameters(new string[] { \"500\" }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly 2 parameters. The parameters are integers (validated by the calling process). If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly 2 parameters. Execute() Executes the Triangle command to draw a triangle on the Canvas. public override void Execute() Examples The following example demonstrates how to use the Triangle class: Canvas myCanvas = new Canvas(); Triangle triangleCommand = new Triangle(myCanvas, 500, 300); triangleCommand.Execute(); Remarks The method performs the following steps: Extracts the base length and height parameters from the base class. Validates that the base length and height do not exceed 2000. Calls the Canvas method to render the triangle. If validation fails, a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when base length or height exceeds 2000."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.WriteTo.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.WriteTo.html",
    "title": "Class WriteTo | ASE Assignment",
    "keywords": "Class WriteTo Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command to write processed text to a canvas. Inherits from the CommandOneParameter class. public class WriteTo : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteTo Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WriteTo() Initializes a new instance of the WriteTo class. public WriteTo() WriteTo(Canvas, string) Initializes a new instance of the WriteTo class with a specified canvas and text. public WriteTo(Canvas c, string text) Parameters c Canvas The canvas to write to. text string The text to be written. Methods CheckParameters(string[]) Validates the parameters for the WriteTo command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters to validate. Exceptions CommandException Thrown if the parameters are invalid. Execute() Executes the WriteTo command by processing the text and writing it to the canvas. public override void Execute() Exceptions RestrictionException Thrown if the text is null, empty, whitespace, or exceeds 100 characters."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Assignment_Ashish_Gyawali_77356739.html",
    "title": "Namespace ASE_Assignment_Ashish_Gyawali_77356739 | ASE Assignment",
    "keywords": "Namespace ASE_Assignment_Ashish_Gyawali_77356739 Classes AppArray Represents an application array that supports operations on integer and real arrays. Inherits from the Evaluation class. AppBoolean Represents a Boolean class that extends the BOOSE.Boolean class. AppCanvas Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. AppCast Represents a casting command to convert between different variable types. AppCircle AppCommandFactory AppConditionalCommand AppDrawTo AppElse Represents the Else command in the application, which is a compound command that handles conditional branching in the program. AppEnd Represents the End command in the application, which serves as a terminator for control structures like If, While, and For loops. AppFor AppIf Represents the If command in the application, which allows conditional execution of code blocks. AppInt Represents an integer type command in the application, extending the BOOSE.Int class. AppMoveTo AppPeek Represents the Peek command, which retrieves a value from an array without modifying it. Inherits functionality from the AppArray class. AppPenColour AppPoke Represents the Poke command, which updates a specific value in an array. Inherits functionality from the AppArray class. AppPraser Represents a custom parser for interpreting and compiling commands in a stored program. AppReal Represents a real number type command in the application, extending the BOOSE.Real class. AppRectangle AppWhile Represents the While command in the application, which facilitates loop execution based on a condition. Inherits functionality from the ApplicationCompoundCommand class. ApplicationCompoundCommand ApplicationMethod Clear Fill Form1 GlobalConfig MyStoredProgram Represents a stored program that can execute commands on a canvas. Provides support for variables, methods, expressions, and conditional commands. PenSize Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. Reset Triangle WriteTo Represents a command to write processed text to a canvas. Inherits from the CommandOneParameter class."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.CommandFactoryTest.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.CommandFactoryTest.html",
    "title": "Class CommandFactoryTest | ASE Assignment",
    "keywords": "Class CommandFactoryTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Test class to verify the behavior of the AppCommandFactory and its command creation logic. [TestClass] public class CommandFactoryTest Inheritance object CommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing a new AppCommandFactory instance. [TestInitialize] public void SetUp() TestMakeCommand_Array_ShouldReturnReset() Tests that the \"array\" command returns a ApplicationArray object. [TestMethod] public void TestMakeCommand_Array_ShouldReturnReset() TestMakeCommand_Boolean_ShouldReturnReset() Tests that the \"boolean\" command returns a ApplicationBoolean object. [TestMethod] public void TestMakeCommand_Boolean_ShouldReturnReset() TestMakeCommand_Call_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Call object. [TestMethod] public void TestMakeCommand_Call_ShouldReturnReset() TestMakeCommand_Circle_ShouldReturnAppCircle() Tests that the \"circle\" command returns a MyCircle object. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() TestMakeCommand_Clear_ShouldReturnClear() Tests that the \"clear\" command returns a MyClear object. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Tests that the \"drawto\" command returns a MyDrawTo object. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() TestMakeCommand_Else_ShouldReturnReset() Tests that the \"else\" command returns a ApplicationElse object. [TestMethod] public void TestMakeCommand_Else_ShouldReturnReset() TestMakeCommand_End_ShouldReturnReset() Tests that the \"end\" command returns a ApplicationEnd object. [TestMethod] public void TestMakeCommand_End_ShouldReturnReset() TestMakeCommand_Evaluation_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Evaluation object. [TestMethod] public void TestMakeCommand_Evaluation_ShouldReturnReset() TestMakeCommand_Fill_ShouldReturnFill() Tests that the \"fill\" command returns a MyFill object. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() TestMakeCommand_For_ShouldReturnReset() Tests that the \"for\" command returns a ApplicationFor object. [TestMethod] public void TestMakeCommand_For_ShouldReturnReset() TestMakeCommand_If_ShouldReturnReset() Tests that the \"else\" command returns a ApplicationIf object. [TestMethod] public void TestMakeCommand_If_ShouldReturnReset() TestMakeCommand_Int_ShouldReturnReset() Tests that the \"int\" command returns a ApplicationInt object. [TestMethod] public void TestMakeCommand_Int_ShouldReturnReset() TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Tests that invalid commands throw a BOOSE.FactoryException. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Tests that the \"moveto\" command returns a MyMoveTo object. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() TestMakeCommand_Peek_ShouldReturnReset() Tests that the \"poke\" command returns a ApplicationPeek object. [TestMethod] public void TestMakeCommand_Peek_ShouldReturnReset() TestMakeCommand_PenSize_ShouldReturnPenSize() Tests that the \"pensize\" command returns a PenSize object. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() TestMakeCommand_Poke_ShouldReturnReset() Tests that the \"poke\" command returns a ApplicationPoke object. [TestMethod] public void TestMakeCommand_Poke_ShouldReturnReset() TestMakeCommand_Real_ShouldReturnReset() Tests that the \"real\" command returns a ApplicationReal object. [TestMethod] public void TestMakeCommand_Real_ShouldReturnReset() TestMakeCommand_Rect_ShouldReturnAppRectangle() Tests that the \"rect\" command returns a MyRectangle object. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() TestMakeCommand_Reset_ShouldReturnReset() Tests that the \"reset\" command returns a MyResets object. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() TestMakeCommand_Tri_ShouldReturnTriangle() Tests that the \"tri\" command returns a MyTriangle object. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() TestMakeCommand_While_ShouldReturnReset() Tests that the \"while\" command returns a ApplicationWhile object. [TestMethod] public void TestMakeCommand_While_ShouldReturnReset() TestMakeCommand_WriteTo_ShouldReturnWriteTo() Tests that the \"writeto\" command returns a MyWriteTo object. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo() TestMakeCommand_method_ShouldReturnReset() Tests that the \"method\" command returns a ApplicationMethod object. [TestMethod] public void TestMakeCommand_method_ShouldReturnReset()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.CommandUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.CommandUnitTests.html",
    "title": "Class CommandUnitTests | ASE Assignment",
    "keywords": "Class CommandUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll [TestClass] public class CommandUnitTests Inheritance object CommandUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_ArrayCommand_Restricted() public void Test_ArrayCommand_Restricted() Test_ArrayCommand_UnRestricted() public void Test_ArrayCommand_UnRestricted() Test_ForCommand_Restricted() [TestMethod] public void Test_ForCommand_Restricted() Test_ForCommand_Unrestricted() [TestMethod] public void Test_ForCommand_Unrestricted() Test_IFCommand_Restricted() [TestMethod] public void Test_IFCommand_Restricted() Test_IFCommand_Unrestricted() [TestMethod] public void Test_IFCommand_Unrestricted() Test_IntCommand_Restricted() [TestMethod] public void Test_IntCommand_Restricted() Test_IntCommand_UnRestricted() [TestMethod] public void Test_IntCommand_UnRestricted() Test_MethodCommand_UnRestricted() public void Test_MethodCommand_UnRestricted() Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Test_ProgramSizeCommand_UnRestricted() public void Test_ProgramSizeCommand_UnRestricted() Test_RealCommand_Restricted() [TestMethod] public void Test_RealCommand_Restricted() Test_RealCommand_Unrestricted() [TestMethod] public void Test_RealCommand_Unrestricted() Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running a single command does not change the global output exception message. [TestMethod] public void Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Examples This test runs a single moveto command and verifies that no exception is thrown: mockParser.ParseProgram(\"moveto 100,100\"); program.Run(); Assert.IsTrue(true, \"No exception should be thrown when a valid single command is executed.\"); Remarks Validates that even when a single valid command is executed, no exception is thrown during execution. Test_WhileCommand_Restricted() [TestMethod] public void Test_WhileCommand_Restricted() Test_WhileCommand_Unrestricted() [TestMethod] public void Test_WhileCommand_Unrestricted()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.GloabalCofigTest.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.GloabalCofigTest.html",
    "title": "Class GloabalCofigTest | ASE Assignment",
    "keywords": "Class GloabalCofigTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Test class for verifying the functionality of the GlobalConfig class. [TestClass] public class GloabalCofigTest Inheritance object GloabalCofigTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestSetAndGetIsFillEnabled() Tests if the IsFillEnabled property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetIsFillEnabled() TestSetAndGetMaxX() Tests if the MaxX property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetMaxX() TestSetAndGetMaxY() Tests if the MaxY property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetMaxY() TestSetAndGetPenSize() Tests if the PenSize property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetPenSize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyAppCanvasTest.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyAppCanvasTest.html",
    "title": "Class MyAppCanvasTest | ASE Assignment",
    "keywords": "Class MyAppCanvasTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Test class for AppCanvas to validate its behavior and functionality. [TestClass] public sealed class MyAppCanvasTest Inheritance object MyAppCanvasTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields canvas public AppCanvas canvas Field Value AppCanvas Methods DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Tests drawing to coordinates that are out of bounds and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() Tests drawing to the canvas when the graphics context is null and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Tests drawing to valid coordinates and updates the pen position. [TestMethod] public void DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Tests moving the pen to coordinates that are out of bounds and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Tests moving the pen to valid coordinates and updates the pen position. [TestMethod] public void MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Rect_ShouldDrawFilledRectangle_WhenValid() Tests drawing a filled rectangle with valid dimensions. [TestMethod] public void Rect_ShouldDrawFilledRectangle_WhenValid() Rect_ShouldThrowException_WhenDimensionsAreInvalid() Tests drawing a rectangle with invalid dimensions and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void Rect_ShouldThrowException_WhenDimensionsAreInvalid() SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() Tests initializing the canvas with a valid bitmap and graphics context. [TestMethod] public void SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() Tests setting an invalid color and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() SetUp() Initializes the test setup by creating an instance of AppCanvas. [TestInitialize] public void SetUp() TestBoundaryPenPosition() Tests the pen position when it exceeds canvas boundaries. [TestMethod] public void TestBoundaryPenPosition() TestCircleExceedsCanvas() Tests drawing a circle that exceeds the canvas dimensions and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestCircleExceedsCanvas() TestCustomCanvasSizeInitialization() Tests custom canvas size initialization. [TestMethod] public void TestCustomCanvasSizeInitialization() TestDefaultConstructor() Tests the default constructor for AppCanvas. [TestMethod] public void TestDefaultConstructor() TestDrawCircleInvalidRadius() Tests drawing a circle with an invalid radius and ensures CanvasException is thrown. [TestMethod] public void TestDrawCircleInvalidRadius() TestDrawCircleValid() Tests drawing a valid circle on the canvas. [TestMethod] public void TestDrawCircleValid() TestExceedMaximumCanvasSize() Tests exceeding the maximum canvas size and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestExceedMaximumCanvasSize() TestInvalidCanvasSize_ShouldThrowCanvasException() Tests if setting an invalid canvas size throws a CanvasException. [TestMethod] public void TestInvalidCanvasSize_ShouldThrowCanvasException() TestResetCanvas() Tests resetting the canvas to its default state. [TestMethod] public void TestResetCanvas() TestSetPenColorValid() Tests setting a valid pen color. [TestMethod] public void TestSetPenColorValid() TestSetPenPositionInvalid() Tests setting an invalid pen position and ensures default values are applied. [TestMethod] public void TestSetPenPositionInvalid() TestSetPenPositionValid() Tests setting a valid pen position. [TestMethod] public void TestSetPenPositionValid() TestSetPenSizeInvalid() Tests setting an invalid pen size and ensures default value is applied. [TestMethod] public void TestSetPenSizeInvalid() TestSetPenSizeValid() Tests setting a valid pen size. [TestMethod] public void TestSetPenSizeValid() TestToggleShapeFilling() Tests toggling the shape filling property. [TestMethod] public void TestToggleShapeFilling()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyCircleUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyCircleUnitTests.html",
    "title": "Class MyCircleUnitTests | ASE Assignment",
    "keywords": "Class MyCircleUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppCircle class to validate its behavior and functionality. [TestClass] public class MyCircleUnitTests Inheritance object MyCircleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of AppCircle to ensure it does not throw an exception for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of AppCircle to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyClearUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyClearUnitTests.html",
    "title": "Class MyClearUnitTests | ASE Assignment",
    "keywords": "Class MyClearUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Clear command to validate its behavior and functionality. [TestClass] public class MyClearUnitTests Inheritance object MyClearUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests the CheckParameters method of the Clear command to ensure it ignores additional unexpected parameters. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests the CheckParameters method of the Clear command to ensure it does not throw exceptions for an empty parameter list. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests the CheckParameters method of the Clear command to ensure it does not throw exceptions for a null parameter list. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests the constructor of the Clear command to ensure it initializes correctly with a valid canvas. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldClearCanvas_WhenCanvasIsValid() Tests the Execute method of the Clear command to ensure it clears the canvas. [TestMethod] public void Execute_ShouldClearCanvas_WhenCanvasIsValid() Execute_ShouldHandleNullCanvas_Gracefully() Tests the Execute method of the Clear command to ensure it handles a null canvas gracefully. [TestMethod] public void Execute_ShouldHandleNullCanvas_Gracefully() Execute_ShouldNotThrowException_WhenCanvasIsEmpty() Tests the Execute method of the Clear command to ensure it does not throw exceptions when the canvas is empty. [TestMethod] public void Execute_ShouldNotThrowException_WhenCanvasIsEmpty() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyDrawToUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyDrawToUnitTests.html",
    "title": "Class MyDrawToUnitTests | ASE Assignment",
    "keywords": "Class MyDrawToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppDrawTo command to validate its behavior and functionality. [TestClass] public class MyDrawToUnitTests Inheritance object MyDrawToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the AppDrawTo command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the AppDrawTo command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() Tests the constructor of the AppDrawTo command to ensure it throws a RestrictionException when coordinates are negative. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyFillUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyFillUnitTests.html",
    "title": "Class MyFillUnitTests | ASE Assignment",
    "keywords": "Class MyFillUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Fill command to validate its behavior and functionality. [TestClass] public class MyFillUnitTests Inheritance object MyFillUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrowException_WhenParameterIsValid() Tests the CheckParameters method of the Fill command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterIsValid() Constructor_ShouldInitialize_WhenTextIsValid() Tests the Fill constructor to ensure it initializes correctly with a valid text value. [TestMethod] public void Constructor_ShouldInitialize_WhenTextIsValid() Constructor_ShouldThrowException_WhenTextIsNull() Tests the Fill constructor to ensure it throws an ArgumentNullException when the text parameter is null. [TestMethod] public void Constructor_ShouldThrowException_WhenTextIsNull() Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Tests the Execute method of the Fill command to ensure it handles excessively long text appropriately. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() Tests the Execute method of the Fill command to ensure it handles whitespace text appropriately. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() SetFilled_ShouldSetFillStateToFalse_WhenTextIsFalse() Tests the Execute method of the Fill command to ensure it sets the fill state to false when the text is \"false\". [TestMethod] public void SetFilled_ShouldSetFillStateToFalse_WhenTextIsFalse() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyMoveToUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyMoveToUnitTests.html",
    "title": "Class MyMoveToUnitTests | ASE Assignment",
    "keywords": "Class MyMoveToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppMoveTo command to validate its behavior and functionality. [TestClass] public class MyMoveToUnitTests Inheritance object MyMoveToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the AppMoveTo command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the AppMoveTo command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() Tests the constructor of the AppMoveTo command to ensure it throws a RestrictionException when coordinates exceed the limit. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyPenColourUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyPenColourUnitTests.html",
    "title": "Class MyPenColourUnitTests | ASE Assignment",
    "keywords": "Class MyPenColourUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppPenColour command to validate its behavior and functionality. [TestClass] public class MyPenColourUnitTests Inheritance object MyPenColourUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the AppPenColour command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the AppPenColour command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyRectangleUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyRectangleUnitTests.html",
    "title": "Class MyRectangleUnitTests | ASE Assignment",
    "keywords": "Class MyRectangleUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppRectangle command to validate its behavior and functionality. [TestClass] public class MyRectangleUnitTests Inheritance object MyRectangleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the AppRectangle command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the AppRectangle command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyResetsUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyResetsUnitTests.html",
    "title": "Class MyResetsUnitTests | ASE Assignment",
    "keywords": "Class MyResetsUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Reset command to validate its behavior and functionality. [TestClass] public class MyResetsUnitTests Inheritance object MyResetsUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests the CheckParameters method of the Reset command to ensure it ignores additional unexpected parameters. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests the CheckParameters method of the Reset command to ensure it does not throw exceptions for an empty parameter list. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests the CheckParameters method of the Reset command to ensure it does not throw exceptions for a null parameter list. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests the constructor of the Reset command to ensure it initializes correctly with a valid canvas. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() Tests the Execute method of the Reset command to ensure it throws a NullReferenceException when the canvas is null. [TestMethod] public void Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyStoredProgramUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyStoredProgramUnitTests.html",
    "title": "Class MyStoredProgramUnitTests | ASE Assignment",
    "keywords": "Class MyStoredProgramUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll [TestClass] public class MyStoredProgramUnitTests Inheritance object MyStoredProgramUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_AddVariable_Duplicate_ShouldNotStore() [TestMethod] public void Test_AddVariable_Duplicate_ShouldNotStore() Test_AddVariable_ShouldStoreVariable() [TestMethod] public void Test_AddVariable_ShouldStoreVariable() Test_EvaluateExpression_Invalid_ShouldThrowException() [TestMethod] public void Test_EvaluateExpression_Invalid_ShouldThrowException() Test_EvaluateExpression_ShouldReturnResult() [TestMethod] public void Test_EvaluateExpression_ShouldReturnResult() Test_InitializeProgram_ShouldSetDefaults() [TestMethod] public void Test_InitializeProgram_ShouldSetDefaults() Test_PopEmptyStack_ShouldThrowException() [TestMethod] public void Test_PopEmptyStack_ShouldThrowException() Test_PushPopConditionalCommands_ShouldHandleStack() [TestMethod] public void Test_PushPopConditionalCommands_ShouldHandleStack() Test_UpdateVariable_ShouldUpdateValue() [TestMethod] public void Test_UpdateVariable_ShouldUpdateValue()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyTriangleTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyTriangleTests.html",
    "title": "Class MyTriangleTests | ASE Assignment",
    "keywords": "Class MyTriangleTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Triangle command to validate its behavior and functionality. [TestClass] public class MyTriangleTests Inheritance object MyTriangleTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the Triangle command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the Triangle command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldSetBaseLengthAndHeightCorrectly() Verifies that baseLength and height are set correctly via the Triangle constructor. [TestMethod] public void Constructor_ShouldSetBaseLengthAndHeightCorrectly() Execute_ShouldThrowRestrictionException_WhenBaseLengthOrHeightExceeds2000() Tests the Execute method of the Triangle command to ensure it handles invalid dimensions by not calling the Tri method on the canvas. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenBaseLengthOrHeightExceeds2000() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyWriteToUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.MyWriteToUnitTests.html",
    "title": "Class MyWriteToUnitTests | ASE Assignment",
    "keywords": "Class MyWriteToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the WriteTo command to validate its behavior and functionality. [TestClass] public class MyWriteToUnitTests Inheritance object MyWriteToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParameterIsValid() Tests the CheckParameters method of the WriteTo command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParameterIsValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the WriteTo command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Tests the Execute method of the WriteTo command to ensure it handles overly long text by logging a RestrictionException. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Execute_ShouldThrowRestrictionException_WhenTextIsEmpty() Tests the Execute method of the WriteTo command to ensure it handles empty text by logging a RestrictionException. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsEmpty() Execute_ShouldThrowRestrictionException_WhenTextIsNull() Tests the Execute method of the WriteTo command to ensure it handles null text by logging a RestrictionException. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsNull() Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() Tests the Execute method of the WriteTo command to ensure it handles whitespace text by logging a RestrictionException. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.ParserTest.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.ParserTest.html",
    "title": "Class ParserTest | ASE Assignment",
    "keywords": "Class ParserTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppPraser class to validate its command parsing and program parsing functionality. [TestClass] public class ParserTest Inheritance object ParserTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing the canvas, command factory, stored program, and parser instances. [TestInitialize] public void SetUp() TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() Tests the ParseCommand method to ensure it returns a valid command for a known command input. [TestMethod] public void TestParseCommand_ShouldReturnValidCommand_ForKnownCommand()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.PenSizeUnitTests.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.PenSizeUnitTests.html",
    "title": "Class PenSizeUnitTests | ASE Assignment",
    "keywords": "Class PenSizeUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the PenSize command to validate its behavior and functionality. [TestClass] public class PenSizeUnitTests Inheritance object PenSizeUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the PenSize command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the PenSize command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldHandleBoundaryValue_Zero() Tests the Execute method of the PenSize command to ensure it handles boundary value zero correctly. [TestMethod] public void Execute_ShouldHandleBoundaryValue_Zero() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/api/ASE_Test_Project.html",
    "title": "Namespace ASE_Test_Project | ASE Assignment",
    "keywords": "Namespace ASE_Test_Project Classes CommandFactoryTest Test class to verify the behavior of the AppCommandFactory and its command creation logic. CommandUnitTests GloabalCofigTest Test class for verifying the functionality of the GlobalConfig class. MyAppCanvasTest Test class for AppCanvas to validate its behavior and functionality. MyCircleUnitTests Unit tests for the AppCircle class to validate its behavior and functionality. MyClearUnitTests Unit tests for the Clear command to validate its behavior and functionality. MyDrawToUnitTests Unit tests for the AppDrawTo command to validate its behavior and functionality. MyFillUnitTests Unit tests for the Fill command to validate its behavior and functionality. MyMoveToUnitTests Unit tests for the AppMoveTo command to validate its behavior and functionality. MyPenColourUnitTests Unit tests for the AppPenColour command to validate its behavior and functionality. MyRectangleUnitTests Unit tests for the AppRectangle command to validate its behavior and functionality. MyResetsUnitTests Unit tests for the Reset command to validate its behavior and functionality. MyStoredProgramUnitTests MyTriangleTests Unit tests for the Triangle command to validate its behavior and functionality. MyWriteToUnitTests Unit tests for the WriteTo command to validate its behavior and functionality. ParserTest Unit tests for the AppPraser class to validate its command parsing and program parsing functionality. PenSizeUnitTests Unit tests for the PenSize command to validate its behavior and functionality."
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/docs/getting-started.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/docs/getting-started.html",
    "title": "Getting Started | ASE Assignment",
    "keywords": "Getting Started"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/docs/introduction.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/docs/introduction.html",
    "title": "Introduction | ASE Assignment",
    "keywords": "Introduction"
  },
  "ASE_Assignment_Ashish_Gyawali_77356739/index.html": {
    "href": "ASE_Assignment_Ashish_Gyawali_77356739/index.html",
    "title": "This is the HOMEPAGE. | ASE Assignment",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppArray.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppArray.html",
    "title": "Class AppArray | ASE Assignment",
    "keywords": "Class AppArray Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents an application array that supports operations on integer and real arrays. Inherits from the Evaluation class. public class AppArray : Evaluation, ICommand Inheritance object Command Evaluation AppArray Implements ICommand Derived AppPeek AppPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppArray() Initializes a new instance of the AppArray class. public AppArray() Fields IntValue Stores integer value during operations. protected int IntValue Field Value int PEEK Constant for peek operation (false). protected const bool PEEK = false Field Value bool POKE Constant for poke operation (true). public const bool POKE = true Field Value bool RealValue Stores real value during operations. protected double RealValue Field Value double columnCurrent Current column index. protected int columnCurrent Field Value int columnExpression Expression for the column index. protected string columnExpression Field Value string columnsCount Number of columns in the array. Default is 1. protected int columnsCount Field Value int intArray 2D array for storing integer values. protected int[,] intArray Field Value int[,] peekValue Value for peek operation. protected string peekValue Field Value string pokeValue Value for poke operation. protected string pokeValue Field Value string realArray 2D array for storing real values. protected double[,] realArray Field Value double[,] rowCurrent Current row index. protected int rowCurrent Field Value int rowExpression Expression for the row index. protected string rowExpression Field Value string rowsCount Number of rows in the array. protected int rowsCount Field Value int type Type of the array (\"int\" or \"real\"). protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Enforces restrictions on array operations. public void ArrayRestrictions() CheckParameters(string[]) Checks the validity of the array parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Array parameter list as a string array. Compile() Compiles the array definition and validates parameters. public override void Compile() Execute() Executes the array initialization. public override void Execute() GetIntArray(int, int) Gets the value of an integer array at a specific index. public virtual int GetIntArray(int row, int col) Parameters row int The row index. col int The column index. Returns int The value at the specified index. GetRealArray(int, int) Gets the value of a real array at a specific index. public virtual double GetRealArray(int row, int col) Parameters row int The row index. col int The column index. Returns double The value at the specified index. ProcessArrayParametersCompile(bool) Processes array parameters during compilation. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates if the operation is a poke operation. ProcessArrayParametersExecute(bool) Processes array parameters during execution. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates if the operation is a poke operation. ReduceRestrictionCounter() Reduces the restriction counter for array operations. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets the value of an integer array at a specific index. public virtual void SetIntArray(int value, int row, int col) Parameters value int The value to set. row int The row index. col int The column index. SetRealArray(double, int, int) Sets the value of a real array at a specific index. public virtual void SetRealArray(double value, int row, int col) Parameters value double The value to set. row int The row index. col int The column index."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppBoolean.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppBoolean.html",
    "title": "Class AppBoolean | ASE Assignment",
    "keywords": "Class AppBoolean Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a Boolean class that extends the BOOSE.Boolean class. public class AppBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean AppBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Enforces restrictions specific to the AppBoolean class. public override void Restrictions()"
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppCanvas.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppCanvas.html",
    "title": "Class AppCanvas | ASE Assignment",
    "keywords": "Class AppCanvas Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods for drawing various shapes (lines, circles, rectangles, triangles) and text on a canvas represented by a bitmap. It supports operations such as setting the pen color and size, moving the pen to a new position, and resetting the canvas to its initial state. The canvas is defined by a width (XSIDE) and height (YSIDE), which are used to constrain drawing operations within the canvas boundaries. The class utilizes the Graphics object to perform rendering on the canvas. Constructors AppCanvas() Initializes a new instance of the MyAppCanvas class with default canvas size. public AppCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. PenSize Gets or sets the pen size, which determines the thickness of the lines drawn. public int PenSize { get; set; } Property Value int The pen size, which is a positive integer. It determines how thick the lines will appear on the canvas. A value greater than zero is required. If the value is zero or negative, an exception will be thrown. Exceptions CanvasException Thrown when the pen size is set to a value less than or equal to zero. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). Any previous drawing operations will not be affected, but the next drawing operations will begin from the top-left corner of the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppCast.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppCast.html",
    "title": "Class AppCast | ASE Assignment",
    "keywords": "Class AppCast Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a casting command to convert between different variable types. public class AppCast : Command, ICommand Inheritance object Command AppCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters passed for the casting operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] Array of parameters to validate. Exceptions CommandException Thrown when the number of parameters is not equal to two. Compile() Compiles the casting operation by verifying the existence and compatibility of variables. public override void Compile() Exceptions CommandException Thrown when variables do not exist or the source is a real type. Execute() Executes the casting operation by converting the source integer value to the target real value. public override void Execute()"
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppCircle.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppCircle.html",
    "title": "Class AppCircle | ASE Assignment",
    "keywords": "Class AppCircle Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command that draws a circle on a canvas. public class AppCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCircle() Initializes a new instance of the AppCircle class. This constructor does not initialize any canvas or radius. public AppCircle() AppCircle(Canvas, int) Initializes a new instance of the AppCircle class with a specified canvas and radius. public AppCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. Exceptions RestrictionException Thrown when the radius exceeds the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the circle command. Ensures that exactly one parameter is passed and that it is a valid positive integer. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid, such as incorrect number of parameters or an invalid radius. Execute() Executes the command to draw a circle on the canvas. Validates the radius and ensures it does not exceed the limit of 2000. public override void Execute() Exceptions RestrictionException Thrown when the radius exceeds the allowed limit of 2000. CommandException Thrown when an unexpected error occurs during the execution of the command."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppCommandFactory.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE Assignment",
    "keywords": "Class AppCommandFactory Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Factory class to create specific ICommand objects based on the provided command string. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates a specific BOOSE.ICommand based on the provided command string. The method checks the command string and returns the corresponding ICommand object. If the command is invalid, a FactoryException is caught, logged, and handled safely. public override ICommand MakeCommand(string command) Parameters command string The command string to create a corresponding ICommand. Returns ICommand An BOOSE.ICommand corresponding to the provided command string, or null if the command is invalid."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppConditionalCommand.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppConditionalCommand.html",
    "title": "Class AppConditionalCommand | ASE Assignment",
    "keywords": "Class AppConditionalCommand Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a conditional command that extends from the BOOSE.ConditionalCommand class. This class provides functionality to reset or decrease a private static field in the BOOSE.Boolean class, as well as override the BOOSE.ConditionalCommand.Execute() method to execute additional behavior. public class AppConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand Implements ICommand Derived ApplicationCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command and resets the private static field to 0. public override void Execute() Examples var command = new AppConditionalCommand(); command.Execute(); Remarks This method overrides the BOOSE.ConditionalCommand.Execute() method to include resetting the value of the private static field 꿁 to 0 after executing the base command. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var command = new AppConditionalCommand(); command.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 뇀 in the BOOSE.Boolean class using reflection Exceptions BOOSEException Thrown when the private field 뇀 cannot be accessed using reflection."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppDrawTo.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppDrawTo.html",
    "title": "Class AppDrawTo | ASE Assignment",
    "keywords": "Class AppDrawTo Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command that moves the drawing cursor to a specified position on the canvas. This class extends from the BOOSE.CommandTwoParameters class and allows drawing to a given set of x and y coordinates on the canvas. public class AppDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppDrawTo() Initializes a new instance of the AppDrawTo class. public AppDrawTo() AppDrawTo(Canvas, int, int) Initializes a new instance of the AppDrawTo class with a specified canvas and coordinates. public AppDrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the drawing will occur. x int The x-coordinate to draw to. y int The y-coordinate to draw to. Exceptions RestrictionException Thrown when coordinates are invalid (e.g., negative). Methods CheckParameters(string[]) Validates the parameters for the draw-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw to the specified position. public override void Execute() Exceptions CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppElse.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppElse.html",
    "title": "Class AppElse | ASE Assignment",
    "keywords": "Class AppElse Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the Else command in the application, which is a compound command that handles conditional branching in the program. public class AppElse : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppElse Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppElse() Initializes a new instance of the AppElse class. public AppElse() Properties CorrespondingEnd Gets or sets the corresponding End command. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Checks the parameters for the Else command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to validate. Exceptions CommandException Thrown when the parameters are invalid for the Else command. Compile() Compiles the Else command by linking it to the corresponding command in the program. public override void Compile() Execute() Executes the Else command by modifying the program counter if the condition of the corresponding command is true. public override void Execute()"
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppEnd.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppEnd.html",
    "title": "Class AppEnd | ASE Assignment",
    "keywords": "Class AppEnd Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the End command in the application, which serves as a terminator for control structures like If, While, and For loops. public class AppEnd : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppEnd Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppEnd() Initializes a new instance of the AppEnd class. public AppEnd() Methods Compile() Compiles the End command by linking it to the corresponding control command (e.g., If, While, For). public override void Compile() Exceptions CommandException Thrown when the syntax does not match the expected structure for the corresponding command. Execute() Executes the End command, which modifies the program counter based on the type of the corresponding command. public override void Execute() Exceptions CommandException Thrown when the loop control variable does not exist or the loop step is invalid."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppFor.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppFor.html",
    "title": "Class AppFor | ASE Assignment",
    "keywords": "Class AppFor Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a BOOSE.For loop command with additional functionality to reset or decrease the value of a private static field. This class overrides the BOOSE.For class to add custom behavior, such as resetting a private static field in the BOOSE.Boolean class. public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the overridden logic and resets the private static field to 0. public override void Execute() Examples var appFor = new AppFor(); appFor.Execute(); Remarks This method overrides the BOOSE.For.Execute() method to include resetting the private static field 꿁 to 0 after executing the base logic. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appFor = new AppFor(); appFor.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 뇀 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 뇀 cannot be accessed using reflection."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppIf.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppIf.html",
    "title": "Class AppIf | ASE Assignment",
    "keywords": "Class AppIf Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the If command in the application, which allows conditional execution of code blocks. public class AppIf : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppIf Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppIf() Initializes a new instance of the AppIf class. public AppIf() Methods ReduceRestrictions() Reduces restrictions applied to the If command. protected void ReduceRestrictions()"
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppInt.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppInt.html",
    "title": "Class AppInt | ASE Assignment",
    "keywords": "Class AppInt Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents an integer type command in the application, extending the BOOSE.Int class. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Enforces restrictions specific to the AppInt class. public override void Restrictions()"
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppMoveTo.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppMoveTo.html",
    "title": "Class AppMoveTo | ASE Assignment",
    "keywords": "Class AppMoveTo Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command that moves a drawing to a specified position on a canvas. This class extends the BOOSE.CommandTwoParameters class and provides functionality to move to specific coordinates. public class AppMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppMoveTo() Initializes a new instance of the AppMoveTo class. public AppMoveTo() AppMoveTo(Canvas, int, int) Initializes a new instance of the AppMoveTo class with a specified canvas and coordinates. public AppMoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the move operation will occur. x int The x-coordinate to move to. y int The y-coordinate to move to. Exceptions RestrictionException Thrown when coordinates exceed the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to move to the specified position. public override void Execute() Exceptions RestrictionException Thrown when the coordinates exceed the allowed limit of 2000. CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppPeek.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppPeek.html",
    "title": "Class AppPeek | ASE Assignment",
    "keywords": "Class AppPeek Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the Peek command, which retrieves a value from an array without modifying it. Inherits functionality from the AppArray class. public class AppPeek : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPeek Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPeek() Initializes a new instance of the AppPeek class. public AppPeek() Methods CheckParameters(string[]) Validates the parameters for the Peek command. public override void CheckParameters(string[] parameters) Parameters parameters string[] Array of parameters to validate. Exceptions NotImplementedException Thrown because parameter validation is not implemented. Compile() Compiles the Peek command by processing the array parameters for a read operation. public override void Compile() Execute() Executes the Peek command by retrieving the value from the array and updating the program variable. public override void Execute() Exceptions CommandException Thrown if the array type is unsupported."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppPenColour.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppPenColour.html",
    "title": "Class AppPenColour | ASE Assignment",
    "keywords": "Class AppPenColour Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class AppPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters AppPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPenColour() Initializes a new instance of the AppPenColour class. public AppPenColour() AppPenColour(Canvas, int, int, int) Initializes a new instance of the AppPenColour class with a specified canvas and color parameters. public AppPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas on which the pen color operation will occur. r int The red component of the pen color. g int The green component of the pen color. b int The blue component of the pen color. Exceptions RestrictionException Thrown when any color component exceeds the allowed limits (0-255). Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to set the pen color. public override void Execute() Exceptions RestrictionException Thrown when the color components are out of the allowed range (0-255). CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppPoke.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppPoke.html",
    "title": "Class AppPoke | ASE Assignment",
    "keywords": "Class AppPoke Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the Poke command, which updates a specific value in an array. Inherits functionality from the AppArray class. public class AppPoke : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPoke Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPoke() Initializes a new instance of the AppPoke class. public AppPoke() Methods CheckParameters(string[]) Validates the parameters for the Poke command. public override void CheckParameters(string[] parameter) Parameters parameter string[] Array of parameters to validate. Exceptions CommandException Thrown when the number of parameters is invalid. Compile() Compiles the Poke command by processing the array parameters for a write operation. public override void Compile() Execute() Executes the Poke command by updating the value in the array at the specified location. public override void Execute() Set(StoredProgram, string) Sets the program and parameter list for the Poke command. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The program context for the command. paramsList string The parameter list as a string."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppPraser.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppPraser.html",
    "title": "Class AppPraser | ASE Assignment",
    "keywords": "Class AppPraser Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a custom parser for interpreting and compiling commands in a stored program. public class AppPraser : IParser Inheritance object AppPraser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppPraser(CommandFactory, StoredProgram) Initializes a new instance of the AppPraser class. public AppPraser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The command factory for creating commands. program StoredProgram The stored program being parsed. Methods ParseCommand(string) Parses a single command line into an ICommand object. public virtual ICommand ParseCommand(string line) Parameters line string The line of code to parse. Returns ICommand An ICommand object representing the parsed command. Exceptions ParserException Thrown when a variable does not exist or has an unknown type. ParseProgram(string) Parses an entire program from a string representation. public virtual void ParseProgram(string program) Parameters program string The program as a string."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppReal.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppReal.html",
    "title": "Class AppReal | ASE Assignment",
    "keywords": "Class AppReal Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a real number type command in the application, extending the BOOSE.Real class. public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Enforces restrictions specific to the AppReal class. public override void Restrictions()"
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppRectangle.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppRectangle.html",
    "title": "Class AppRectangle | ASE Assignment",
    "keywords": "Class AppRectangle Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command that draws a rectangle on a specified canvas. This class extends the BOOSE.CommandTwoParameters class and provides functionality to draw a rectangle with specified width and height. public class AppRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppRectangle() Initializes a new instance of the AppRectangle class. public AppRectangle() AppRectangle(Canvas, int, int) Initializes a new instance of the AppRectangle class with a specified canvas, width, and height. public AppRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. Exceptions RestrictionException Thrown when width or height exceed the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw the rectangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown when the width or height exceeds the allowed limit of 2000. CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.AppWhile.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.AppWhile.html",
    "title": "Class AppWhile | ASE Assignment",
    "keywords": "Class AppWhile Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents the While command in the application, which facilitates loop execution based on a condition. Inherits functionality from the ApplicationCompoundCommand class. public class AppWhile : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppWhile Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWhile() Initializes a new instance of the AppWhile class. public AppWhile() Methods ReduceRestrictions() Reduces restrictions applied to the While command. protected void ReduceRestrictions()"
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.ApplicationCompoundCommand.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.ApplicationCompoundCommand.html",
    "title": "Class ApplicationCompoundCommand | ASE Assignment",
    "keywords": "Class ApplicationCompoundCommand Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a compound command in an application that is associated with a control flow structure (such as \"if\", \"while\", \"for\", or \"method\"). This class extends the AppConditionalCommand class and provides additional functionality for handling compound control flow commands, including validation of parameters and resetting values related to control flow. public class ApplicationCompoundCommand : AppConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand Implements ICommand Derived AppElse AppEnd AppIf AppWhile Inherited Members AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationCompoundCommand() Initializes a new instance of the ApplicationCompoundCommand class without instance restrictions. public ApplicationCompoundCommand() Remarks This constructor removes any restrictions on the number of instances that can be created, enabling flexible use of compound commands. Properties CorrespondingCommand Gets or sets the corresponding conditional command associated with this compound command. public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Remarks This property is used to establish a link between the compound command and its parent control flow command. For example, an \"if-end\" command will link to its \"if\" block. Methods CheckParameters(string[]) Validates the parameters passed to the compound command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to validate. Remarks This method ensures that the compound command is associated with a valid control flow structure. It validates the following: Only one parameter is passed. The parameter contains an expected \"end\" marker, such as \"ifEnd\", \"whileEnd\", \"forEnd\", or \"methodEnd\". If the validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter count is invalid or the parameter does not contain a valid \"end\" marker. Compile() Compiles the compound command to prepare it for execution. public override void Compile() Remarks This method calls the base BOOSE.ConditionalCommand.Compile() method to handle any setup or preparation required before the command is executed. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 뇀 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 뇀 cannot be accessed using reflection."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.ApplicationMethod.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.ApplicationMethod.html",
    "title": "Class ApplicationMethod | ASE Assignment",
    "keywords": "Class ApplicationMethod Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a method in the application that overrides the restrictions on the method count. This class extends the BOOSE.Method class and provides additional functionality for resetting private static fields related to method counts and control flow. public class ApplicationMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method ApplicationMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationMethod() Initializes a new instance of the ApplicationMethod class. public ApplicationMethod() Examples var appMethod = new AppMethod(); Remarks The constructor overrides restrictions on method count by invoking ReduceRestrictions twice. It also resets the counts for the fields 꿁 and 꿒 to 0. Methods ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 뇀 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 뇀 cannot be accessed using reflection. ResetOrDecreaseMethodCount(int) Resets or decreases the value of a private static field in the BOOSE.Method class. public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseMethodCount(10); Remarks This method accesses the private static field 뇔 in the BOOSE.Method class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 뇔 cannot be accessed using reflection."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.Clear.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.Clear.html",
    "title": "Class Clear | ASE Assignment",
    "keywords": "Class Clear Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command to clear the contents of a BOOSE.Canvas object. This class extends the BOOSE.CommandOneParameter class and provides functionality to clear all elements on the canvas, either by initializing with a default or specified BOOSE.Canvas. public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Clear() Initializes a new instance of the Clear class with default values. public Clear() Remarks This constructor is used when no specific canvas reference is needed to initialize the command. The Canvas object will be provided when the Execute() method is called. Clear(Canvas) Initializes a new instance of the Clear class with a specified Canvas. public Clear(Canvas c) Parameters c Canvas The BOOSE.Canvas object on which the clear operation will be performed. Remarks This constructor is used when the command is initialized with a known Canvas object that the operation will affect. Methods CheckParameters(string[]) Checks the parameters provided for the Clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters. This list is ignored since no parameters are required for the Clear command. Remarks Since the Clear command does not take any parameters, this method does not perform any validation. It remains empty to ensure that no unexpected behavior occurs when no parameters are provided. Execute() Executes the Clear command to clear the contents of the Canvas. public override void Execute() Examples The following example demonstrates how to use the Clear class: Canvas myCanvas = new Canvas(); Clear clearCommand = new Clear(myCanvas); clearCommand.Execute(); // Clears the canvas Remarks The Execute() method calls the Canvas' BOOSE.Canvas.Clear() method to clear the canvas. Since this command does not require parameters, no validation is necessary for execution."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.Fill.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.Fill.html",
    "title": "Class Fill | ASE Assignment",
    "keywords": "Class Fill Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command to set the fill state of a shape on a BOOSE.Canvas object. This class extends BOOSE.CommandOneParameter and is used to either enable or disable the fill state of shapes based on a string parameter (\"true\" or \"false\"). public class Fill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Fill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Fill() Initializes a new instance of the Fill class with default values. public Fill() Remarks This constructor can be used when no initial text value is provided. The text can be set later using the Execute() method. Fill(Canvas, string) Initializes a new instance of the Fill class with a specified Canvas and text value. public Fill(Canvas c, string text) Parameters c Canvas The BOOSE.Canvas object on which the fill state will be applied. text string A string representing the fill state, either \"true\" or \"false\". Remarks Use this constructor when creating the Fill command with a known text value and Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the Fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the fill state (\"true\" or \"false\"). Examples The following example demonstrates parameter validation: Fill fillCommand = new Fill(); fillCommand.CheckParameters(new string[] { \"true\" }); // No exception fillCommand.CheckParameters(new string[] { \"true\", \"false\" }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly one parameter. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly one parameter. Execute() Executes the Fill command to set the fill state of a shape on the Canvas. public override void Execute() Examples The following example demonstrates how to use the Fill class: Canvas myCanvas = new Canvas(); Fill fillCommand = new Fill(myCanvas, \"true\"); fillCommand.Execute(); Remarks The method performs the following steps: Extracts the text parameter from the base class. Validates the text value to ensure it is not null, empty, or exceeding 5 characters. Calls the SetFilled(string) method to apply the fill state. If the text value is invalid, a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the text value is null, empty, whitespace, or exceeds 5 characters. SetFilled(string) Sets the filled state of the shape using a string value (\"true\" or \"false\"). public void SetFilled(string isFilledStr) Parameters isFilledStr string A string value (\"true\" or \"false\") indicating whether the shape is filled. Remarks This method updates the global configuration to enable or disable filling based on the provided value. Exceptions CommandException Thrown when the string value is neither \"true\" nor \"false\"."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.Form1.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.Form1.html",
    "title": "Class Form1 | ASE Assignment",
    "keywords": "Class Form1 Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.GlobalConfig.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.GlobalConfig.html",
    "title": "Class GlobalConfig | ASE Assignment",
    "keywords": "Class GlobalConfig Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a global configuration class that holds various settings for the canvas and drawing operations. This class includes properties such as fill state, canvas dimensions (MaxX and MaxY), and pen size for drawing. public class GlobalConfig Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled Gets or sets the filled status, which determines whether shapes should be filled or not. public static bool IsFillEnabled { get; set; } Property Value bool A boolean value indicating the filled status. The default value is false. MaxX public static int MaxX { get; set; } Property Value int MaxY public static int MaxY { get; set; } Property Value int PenSize public static int PenSize { get; set; } Property Value int"
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.MyStoredProgram.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.MyStoredProgram.html",
    "title": "Class MyStoredProgram | ASE Assignment",
    "keywords": "Class MyStoredProgram Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a stored program that can execute commands on a canvas. Provides support for variables, methods, expressions, and conditional commands. public class MyStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram MyStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyStoredProgram(ICanvas) Initializes a new instance of the MyStoredProgram class. public MyStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas on which the program will operate. Fields SyntaxOk Indicates whether the program syntax is valid. public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter. public override int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the program. public override int Add(Command C) Parameters C Command The command to add. Returns int The index of the added command. Exceptions StoredProgramException Thrown if the command is null. AddMethod(Method) Adds a method to the program. public override void AddMethod(Method M) Parameters M Method The method to add. AddVariable(Evaluation) Adds a variable to the program. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. Commandsleft() Determines whether there are commands left to execute. public override bool Commandsleft() Returns bool True if there are commands left; otherwise, false. DeleteVariable(string) Deletes a variable by its name. public override void DeleteVariable(string varName) Parameters varName string The name of the variable to delete. EvaluateExpression(string) Evaluates a mathematical or logical expression and returns the result as a string. public override string EvaluateExpression(string Exp) Parameters Exp string The expression to evaluate. Returns string The result of the evaluation. Exceptions StoredProgramException Thrown if the expression syntax is invalid. EvaluateExpressionWithString(string) Evaluates an expression with string concatenation and returns the result. public override string EvaluateExpressionWithString(string expression) Parameters expression string The expression to evaluate. Returns string The result of the evaluation as a string. FindVariable(string) Finds the index of a variable by its name. public override int FindVariable(string varName) Parameters varName string The name of the variable to find. Returns int The index of the variable, or -1 if not found. GetMethod(string) Retrieves a method by its name. public override Method GetMethod(string MethodName) Parameters MethodName string The name of the method to retrieve. Returns Method The requested method. Exceptions StoredProgramException Thrown if the method is not found. GetVarValue(string) Retrieves the value of a variable as a string. public override string GetVarValue(string varName) Parameters varName string The name of the variable. Returns string The value of the variable. Exceptions StoredProgramException Thrown if the variable is not found. GetVariable(int) Retrieves a variable by its index. public override Evaluation GetVariable(int index) Parameters index int The index of the variable to retrieve. Returns Evaluation The requested variable. Exceptions StoredProgramException Thrown if the index is invalid. GetVariable(string) Retrieves a variable by its name. public override Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable to retrieve. Returns Evaluation The requested variable. Exceptions StoredProgramException Thrown if the variable is not found. IsExpression(string) Determines whether a string is a valid expression. public override bool IsExpression(string expression) Parameters expression string The expression to check. Returns bool True if the expression is valid; otherwise, false. NextCommand() Retrieves the next command to execute and increments the program counter. public override object NextCommand() Returns object The next command to execute. Pop() Pops a conditional command from the stack. public override ConditionalCommand Pop() Returns ConditionalCommand The popped conditional command. Exceptions StoredProgramException Thrown if the stack is empty. Push(ConditionalCommand) Pushes a conditional command onto the stack. public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The conditional command to push. ResetProgram() Resets the program, clearing variables, methods, and conditional commands. public virtual void ResetProgram() Run() Executes all commands in the program sequentially. public override void Run() UpdateVariable(string, bool) Updates the value of a boolean variable. public override void UpdateVariable(string varName, bool value) Parameters varName string The name of the variable to update. value bool The new value. Exceptions CommandException Thrown if the variable is not of type boolean. UpdateVariable(string, double) Updates the value of a real variable. public override void UpdateVariable(string varName, double value) Parameters varName string The name of the variable to update. value double The new value. Exceptions CommandException Thrown if the variable is not of type real. UpdateVariable(string, int) Updates the value of an integer variable. public override void UpdateVariable(string varName, int value) Parameters varName string The name of the variable to update. value int The new value. VariableExists(string) Checks if a variable with the specified name exists. public override bool VariableExists(string varName) Parameters varName string The name of the variable to check. Returns bool True if the variable exists; otherwise, false."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.PenSize.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.PenSize.html",
    "title": "Class PenSize | ASE Assignment",
    "keywords": "Class PenSize Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. public class PenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter PenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The PenSize class is responsible for validating and applying the pen size. It ensures the pen size: Is a non-negative integer. Does not exceed 100. If validation fails, a BOOSE.RestrictionException is thrown. Constructors PenSize() Initializes a new instance of the PenSize class with default values. public PenSize() Remarks This default constructor can be used when no initial pen size is provided. The pen size can be set later using the Execute() method. PenSize(Canvas, int) Initializes a new instance of the PenSize class with a specified Canvas and pen size. public PenSize(Canvas c, int pensize) Parameters c Canvas The BOOSE.Canvas object where the pen size will be applied. pensize int The desired pen size to be set. Remarks Use this constructor when creating the command with a known pen size and a Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the PenSize command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the pen size. Examples The following example demonstrates parameter validation: PenSize penSizeCommand = new PenSize(); penSizeCommand.CheckParameters(new string[] { \"10\" }); // No exception penSizeCommand.CheckParameters(new string[] { }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly one parameter. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly 1 parameter. Execute() Executes the PenSize command to set the pen size on the Canvas. public override void Execute() Examples The following example demonstrates how to use the PenSize class: Canvas myCanvas = new Canvas(); PenSize penSizeCommand = new PenSize(myCanvas, 10); penSizeCommand.Execute(); Remarks The method performs the following steps: Extracts the pen size parameter from the base class. Validates that the pen size is within the valid range (0 to 100). Sets the pen size using the SetPenSize(int) method. If the pen size is invalid (either too large or negative), a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the pen size exceeds 100 or is negative. SetPenSize(int) Sets the pen size using an integer argument. public void SetPenSize(int penSize) Parameters penSize int The pen size to set. Must be a non-negative integer. Remarks This method updates the global pen size setting in the application."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.Reset.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.Reset.html",
    "title": "Class Reset | ASE Assignment",
    "keywords": "Class Reset Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command that resets the canvas to its initial state. This class is used to perform a reset operation on the Canvas object, restoring it to its default configuration. public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reset() Initializes a new instance of the Reset class with default values. public Reset() Remarks This constructor is used when no specific Canvas reference is needed to initialize the command. The Canvas object will be provided when the Execute() method is called. Reset(Canvas) Initializes a new instance of the Reset class with a specified Canvas. public Reset(Canvas c) Parameters c Canvas The BOOSE.Canvas object on which the reset operation will be performed. Remarks This constructor is used when the command is initialized with a known Canvas object that the operation will affect. Methods CheckParameters(string[]) Checks the parameters provided for the Reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters. This list is ignored since no parameters are required for the Reset command. Remarks Since the Reset command does not take any parameters, this method does not perform any validation. It remains empty to ensure that no unexpected behavior occurs when no parameters are provided. Execute() Executes the Reset command to reset the Canvas to its initial state. public override void Execute() Examples The following example demonstrates how to use the Reset class: Canvas myCanvas = new Canvas(); Reset resetCommand = new Reset(myCanvas); resetCommand.Execute(); // Resets the canvas to its initial state Remarks The Execute() method calls the Canvas' BOOSE.Canvas.Reset() method to reset the canvas. Since this command does not require parameters, no validation is necessary for execution."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.Triangle.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.Triangle.html",
    "title": "Class Triangle | ASE Assignment",
    "keywords": "Class Triangle Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command to draw a triangle on the Canvas with specified dimensions (base length and height). The triangle is rendered using the provided base length and height values. public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Triangle() Initializes a new instance of the Triangle class with default values. public Triangle() Remarks This default constructor can be used to create an instance of the class without specifying initial values for parameters. Parameters can be assigned later. Triangle(Canvas, int, int) Initializes a new instance of the Triangle class with specified Canvas, base length, and height. public Triangle(Canvas c, int baseLength, int height) Parameters c Canvas The BOOSE.Canvas object on which the triangle will be drawn. baseLength int The base length of the triangle. height int The height of the triangle. Remarks Use this constructor when creating the triangle command with known dimensions and a Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the Triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing base length and height. Examples The following example demonstrates parameter validation: Triangle triangleCommand = new Triangle(); triangleCommand.CheckParameters(new string[] { \"500\", \"300\" }); // No exception triangleCommand.CheckParameters(new string[] { \"500\" }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly 2 parameters. The parameters are integers (validated by the calling process). If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly 2 parameters. Execute() Executes the Triangle command to draw a triangle on the Canvas. public override void Execute() Examples The following example demonstrates how to use the Triangle class: Canvas myCanvas = new Canvas(); Triangle triangleCommand = new Triangle(myCanvas, 500, 300); triangleCommand.Execute(); Remarks The method performs the following steps: Extracts the base length and height parameters from the base class. Validates that the base length and height do not exceed 2000. Calls the Canvas method to render the triangle. If validation fails, a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when base length or height exceeds 2000."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.WriteTo.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.WriteTo.html",
    "title": "Class WriteTo | ASE Assignment",
    "keywords": "Class WriteTo Namespace ASE_Assignment_Ashish_Gyawali_77356739 Assembly ASE_Assignment_Ashish_Gyawali_77356739.dll Represents a command to write processed text to a canvas. Inherits from the CommandOneParameter class. public class WriteTo : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteTo Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WriteTo() Initializes a new instance of the WriteTo class. public WriteTo() WriteTo(Canvas, string) Initializes a new instance of the WriteTo class with a specified canvas and text. public WriteTo(Canvas c, string text) Parameters c Canvas The canvas to write to. text string The text to be written. Methods CheckParameters(string[]) Validates the parameters for the WriteTo command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters to validate. Exceptions CommandException Thrown if the parameters are invalid. Execute() Executes the WriteTo command by processing the text and writing it to the canvas. public override void Execute() Exceptions RestrictionException Thrown if the text is null, empty, whitespace, or exceeds 100 characters."
  },
  "api/ASE_Assignment_Ashish_Gyawali_77356739.html": {
    "href": "api/ASE_Assignment_Ashish_Gyawali_77356739.html",
    "title": "Namespace ASE_Assignment_Ashish_Gyawali_77356739 | ASE Assignment",
    "keywords": "Namespace ASE_Assignment_Ashish_Gyawali_77356739 Classes AppArray Represents an application array that supports operations on integer and real arrays. Inherits from the Evaluation class. AppBoolean Represents a Boolean class that extends the BOOSE.Boolean class. AppCanvas Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. AppCast Represents a casting command to convert between different variable types. AppCircle AppCommandFactory AppConditionalCommand AppDrawTo AppElse Represents the Else command in the application, which is a compound command that handles conditional branching in the program. AppEnd Represents the End command in the application, which serves as a terminator for control structures like If, While, and For loops. AppFor AppIf Represents the If command in the application, which allows conditional execution of code blocks. AppInt Represents an integer type command in the application, extending the BOOSE.Int class. AppMoveTo AppPeek Represents the Peek command, which retrieves a value from an array without modifying it. Inherits functionality from the AppArray class. AppPenColour AppPoke Represents the Poke command, which updates a specific value in an array. Inherits functionality from the AppArray class. AppPraser Represents a custom parser for interpreting and compiling commands in a stored program. AppReal Represents a real number type command in the application, extending the BOOSE.Real class. AppRectangle AppWhile Represents the While command in the application, which facilitates loop execution based on a condition. Inherits functionality from the ApplicationCompoundCommand class. ApplicationCompoundCommand ApplicationMethod Clear Fill Form1 GlobalConfig MyStoredProgram Represents a stored program that can execute commands on a canvas. Provides support for variables, methods, expressions, and conditional commands. PenSize Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. Reset Triangle WriteTo Represents a command to write processed text to a canvas. Inherits from the CommandOneParameter class."
  },
  "api/ASE_Test_Project.CommandFactoryTest.html": {
    "href": "api/ASE_Test_Project.CommandFactoryTest.html",
    "title": "Class CommandFactoryTest | ASE Assignment",
    "keywords": "Class CommandFactoryTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Test class to verify the behavior of the AppCommandFactory and its command creation logic. [TestClass] public class CommandFactoryTest Inheritance object CommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing a new AppCommandFactory instance. [TestInitialize] public void SetUp() TestMakeCommand_Array_ShouldReturnReset() Tests that the \"array\" command returns a ApplicationArray object. [TestMethod] public void TestMakeCommand_Array_ShouldReturnReset() TestMakeCommand_Boolean_ShouldReturnReset() Tests that the \"boolean\" command returns a ApplicationBoolean object. [TestMethod] public void TestMakeCommand_Boolean_ShouldReturnReset() TestMakeCommand_Call_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Call object. [TestMethod] public void TestMakeCommand_Call_ShouldReturnReset() TestMakeCommand_Circle_ShouldReturnAppCircle() Tests that the \"circle\" command returns a MyCircle object. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() TestMakeCommand_Clear_ShouldReturnClear() Tests that the \"clear\" command returns a MyClear object. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Tests that the \"drawto\" command returns a MyDrawTo object. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() TestMakeCommand_Else_ShouldReturnReset() Tests that the \"else\" command returns a ApplicationElse object. [TestMethod] public void TestMakeCommand_Else_ShouldReturnReset() TestMakeCommand_End_ShouldReturnReset() Tests that the \"end\" command returns a ApplicationEnd object. [TestMethod] public void TestMakeCommand_End_ShouldReturnReset() TestMakeCommand_Evaluation_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Evaluation object. [TestMethod] public void TestMakeCommand_Evaluation_ShouldReturnReset() TestMakeCommand_Fill_ShouldReturnFill() Tests that the \"fill\" command returns a MyFill object. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() TestMakeCommand_For_ShouldReturnReset() Tests that the \"for\" command returns a ApplicationFor object. [TestMethod] public void TestMakeCommand_For_ShouldReturnReset() TestMakeCommand_If_ShouldReturnReset() Tests that the \"else\" command returns a ApplicationIf object. [TestMethod] public void TestMakeCommand_If_ShouldReturnReset() TestMakeCommand_Int_ShouldReturnReset() Tests that the \"int\" command returns a ApplicationInt object. [TestMethod] public void TestMakeCommand_Int_ShouldReturnReset() TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Tests that invalid commands throw a BOOSE.FactoryException. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Tests that the \"moveto\" command returns a MyMoveTo object. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() TestMakeCommand_Peek_ShouldReturnReset() Tests that the \"poke\" command returns a ApplicationPeek object. [TestMethod] public void TestMakeCommand_Peek_ShouldReturnReset() TestMakeCommand_PenSize_ShouldReturnPenSize() Tests that the \"pensize\" command returns a PenSize object. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() TestMakeCommand_Poke_ShouldReturnReset() Tests that the \"poke\" command returns a ApplicationPoke object. [TestMethod] public void TestMakeCommand_Poke_ShouldReturnReset() TestMakeCommand_Real_ShouldReturnReset() Tests that the \"real\" command returns a ApplicationReal object. [TestMethod] public void TestMakeCommand_Real_ShouldReturnReset() TestMakeCommand_Rect_ShouldReturnAppRectangle() Tests that the \"rect\" command returns a MyRectangle object. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() TestMakeCommand_Reset_ShouldReturnReset() Tests that the \"reset\" command returns a MyResets object. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() TestMakeCommand_Tri_ShouldReturnTriangle() Tests that the \"tri\" command returns a MyTriangle object. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() TestMakeCommand_While_ShouldReturnReset() Tests that the \"while\" command returns a ApplicationWhile object. [TestMethod] public void TestMakeCommand_While_ShouldReturnReset() TestMakeCommand_WriteTo_ShouldReturnWriteTo() Tests that the \"writeto\" command returns a MyWriteTo object. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo() TestMakeCommand_method_ShouldReturnReset() Tests that the \"method\" command returns a ApplicationMethod object. [TestMethod] public void TestMakeCommand_method_ShouldReturnReset()"
  },
  "api/ASE_Test_Project.CommandUnitTests.html": {
    "href": "api/ASE_Test_Project.CommandUnitTests.html",
    "title": "Class CommandUnitTests | ASE Assignment",
    "keywords": "Class CommandUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll [TestClass] public class CommandUnitTests Inheritance object CommandUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_ArrayCommand_Restricted() public void Test_ArrayCommand_Restricted() Test_ArrayCommand_UnRestricted() public void Test_ArrayCommand_UnRestricted() Test_ForCommand_Restricted() [TestMethod] public void Test_ForCommand_Restricted() Test_ForCommand_Unrestricted() [TestMethod] public void Test_ForCommand_Unrestricted() Test_IFCommand_Restricted() [TestMethod] public void Test_IFCommand_Restricted() Test_IFCommand_Unrestricted() [TestMethod] public void Test_IFCommand_Unrestricted() Test_IntCommand_Restricted() [TestMethod] public void Test_IntCommand_Restricted() Test_IntCommand_UnRestricted() [TestMethod] public void Test_IntCommand_UnRestricted() Test_MethodCommand_UnRestricted() public void Test_MethodCommand_UnRestricted() Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Test_ProgramSizeCommand_UnRestricted() public void Test_ProgramSizeCommand_UnRestricted() Test_RealCommand_Restricted() [TestMethod] public void Test_RealCommand_Restricted() Test_RealCommand_Unrestricted() [TestMethod] public void Test_RealCommand_Unrestricted() Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running a single command does not change the global output exception message. [TestMethod] public void Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Examples This test runs a single moveto command and verifies that no exception is thrown: mockParser.ParseProgram(\"moveto 100,100\"); program.Run(); Assert.IsTrue(true, \"No exception should be thrown when a valid single command is executed.\"); Remarks Validates that even when a single valid command is executed, no exception is thrown during execution. Test_WhileCommand_Restricted() [TestMethod] public void Test_WhileCommand_Restricted() Test_WhileCommand_Unrestricted() [TestMethod] public void Test_WhileCommand_Unrestricted()"
  },
  "api/ASE_Test_Project.GloabalCofigTest.html": {
    "href": "api/ASE_Test_Project.GloabalCofigTest.html",
    "title": "Class GloabalCofigTest | ASE Assignment",
    "keywords": "Class GloabalCofigTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Test class for verifying the functionality of the GlobalConfig class. [TestClass] public class GloabalCofigTest Inheritance object GloabalCofigTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestSetAndGetIsFillEnabled() Tests if the IsFillEnabled property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetIsFillEnabled() TestSetAndGetMaxX() Tests if the MaxX property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetMaxX() TestSetAndGetMaxY() Tests if the MaxY property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetMaxY() TestSetAndGetPenSize() Tests if the PenSize property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetPenSize()"
  },
  "api/ASE_Test_Project.MyAppCanvasTest.html": {
    "href": "api/ASE_Test_Project.MyAppCanvasTest.html",
    "title": "Class MyAppCanvasTest | ASE Assignment",
    "keywords": "Class MyAppCanvasTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Test class for AppCanvas to validate its behavior and functionality. [TestClass] public sealed class MyAppCanvasTest Inheritance object MyAppCanvasTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields canvas public AppCanvas canvas Field Value AppCanvas Methods DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Tests drawing to coordinates that are out of bounds and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() Tests drawing to the canvas when the graphics context is null and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Tests drawing to valid coordinates and updates the pen position. [TestMethod] public void DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Tests moving the pen to coordinates that are out of bounds and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Tests moving the pen to valid coordinates and updates the pen position. [TestMethod] public void MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Rect_ShouldDrawFilledRectangle_WhenValid() Tests drawing a filled rectangle with valid dimensions. [TestMethod] public void Rect_ShouldDrawFilledRectangle_WhenValid() Rect_ShouldThrowException_WhenDimensionsAreInvalid() Tests drawing a rectangle with invalid dimensions and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void Rect_ShouldThrowException_WhenDimensionsAreInvalid() SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() Tests initializing the canvas with a valid bitmap and graphics context. [TestMethod] public void SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() Tests setting an invalid color and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() SetUp() Initializes the test setup by creating an instance of AppCanvas. [TestInitialize] public void SetUp() TestBoundaryPenPosition() Tests the pen position when it exceeds canvas boundaries. [TestMethod] public void TestBoundaryPenPosition() TestCircleExceedsCanvas() Tests drawing a circle that exceeds the canvas dimensions and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestCircleExceedsCanvas() TestCustomCanvasSizeInitialization() Tests custom canvas size initialization. [TestMethod] public void TestCustomCanvasSizeInitialization() TestDefaultConstructor() Tests the default constructor for AppCanvas. [TestMethod] public void TestDefaultConstructor() TestDrawCircleInvalidRadius() Tests drawing a circle with an invalid radius and ensures CanvasException is thrown. [TestMethod] public void TestDrawCircleInvalidRadius() TestDrawCircleValid() Tests drawing a valid circle on the canvas. [TestMethod] public void TestDrawCircleValid() TestExceedMaximumCanvasSize() Tests exceeding the maximum canvas size and ensures CanvasException is thrown. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestExceedMaximumCanvasSize() TestInvalidCanvasSize_ShouldThrowCanvasException() Tests if setting an invalid canvas size throws a CanvasException. [TestMethod] public void TestInvalidCanvasSize_ShouldThrowCanvasException() TestResetCanvas() Tests resetting the canvas to its default state. [TestMethod] public void TestResetCanvas() TestSetPenColorValid() Tests setting a valid pen color. [TestMethod] public void TestSetPenColorValid() TestSetPenPositionInvalid() Tests setting an invalid pen position and ensures default values are applied. [TestMethod] public void TestSetPenPositionInvalid() TestSetPenPositionValid() Tests setting a valid pen position. [TestMethod] public void TestSetPenPositionValid() TestSetPenSizeInvalid() Tests setting an invalid pen size and ensures default value is applied. [TestMethod] public void TestSetPenSizeInvalid() TestSetPenSizeValid() Tests setting a valid pen size. [TestMethod] public void TestSetPenSizeValid() TestToggleShapeFilling() Tests toggling the shape filling property. [TestMethod] public void TestToggleShapeFilling()"
  },
  "api/ASE_Test_Project.MyCircleUnitTests.html": {
    "href": "api/ASE_Test_Project.MyCircleUnitTests.html",
    "title": "Class MyCircleUnitTests | ASE Assignment",
    "keywords": "Class MyCircleUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppCircle class to validate its behavior and functionality. [TestClass] public class MyCircleUnitTests Inheritance object MyCircleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of AppCircle to ensure it does not throw an exception for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of AppCircle to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyClearUnitTests.html": {
    "href": "api/ASE_Test_Project.MyClearUnitTests.html",
    "title": "Class MyClearUnitTests | ASE Assignment",
    "keywords": "Class MyClearUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Clear command to validate its behavior and functionality. [TestClass] public class MyClearUnitTests Inheritance object MyClearUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests the CheckParameters method of the Clear command to ensure it ignores additional unexpected parameters. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests the CheckParameters method of the Clear command to ensure it does not throw exceptions for an empty parameter list. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests the CheckParameters method of the Clear command to ensure it does not throw exceptions for a null parameter list. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests the constructor of the Clear command to ensure it initializes correctly with a valid canvas. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldClearCanvas_WhenCanvasIsValid() Tests the Execute method of the Clear command to ensure it clears the canvas. [TestMethod] public void Execute_ShouldClearCanvas_WhenCanvasIsValid() Execute_ShouldHandleNullCanvas_Gracefully() Tests the Execute method of the Clear command to ensure it handles a null canvas gracefully. [TestMethod] public void Execute_ShouldHandleNullCanvas_Gracefully() Execute_ShouldNotThrowException_WhenCanvasIsEmpty() Tests the Execute method of the Clear command to ensure it does not throw exceptions when the canvas is empty. [TestMethod] public void Execute_ShouldNotThrowException_WhenCanvasIsEmpty() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyDrawToUnitTests.html": {
    "href": "api/ASE_Test_Project.MyDrawToUnitTests.html",
    "title": "Class MyDrawToUnitTests | ASE Assignment",
    "keywords": "Class MyDrawToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppDrawTo command to validate its behavior and functionality. [TestClass] public class MyDrawToUnitTests Inheritance object MyDrawToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the AppDrawTo command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the AppDrawTo command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() Tests the constructor of the AppDrawTo command to ensure it throws a RestrictionException when coordinates are negative. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyFillUnitTests.html": {
    "href": "api/ASE_Test_Project.MyFillUnitTests.html",
    "title": "Class MyFillUnitTests | ASE Assignment",
    "keywords": "Class MyFillUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Fill command to validate its behavior and functionality. [TestClass] public class MyFillUnitTests Inheritance object MyFillUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrowException_WhenParameterIsValid() Tests the CheckParameters method of the Fill command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterIsValid() Constructor_ShouldInitialize_WhenTextIsValid() Tests the Fill constructor to ensure it initializes correctly with a valid text value. [TestMethod] public void Constructor_ShouldInitialize_WhenTextIsValid() Constructor_ShouldThrowException_WhenTextIsNull() Tests the Fill constructor to ensure it throws an ArgumentNullException when the text parameter is null. [TestMethod] public void Constructor_ShouldThrowException_WhenTextIsNull() Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Tests the Execute method of the Fill command to ensure it handles excessively long text appropriately. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() Tests the Execute method of the Fill command to ensure it handles whitespace text appropriately. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() SetFilled_ShouldSetFillStateToFalse_WhenTextIsFalse() Tests the Execute method of the Fill command to ensure it sets the fill state to false when the text is \"false\". [TestMethod] public void SetFilled_ShouldSetFillStateToFalse_WhenTextIsFalse() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyMoveToUnitTests.html": {
    "href": "api/ASE_Test_Project.MyMoveToUnitTests.html",
    "title": "Class MyMoveToUnitTests | ASE Assignment",
    "keywords": "Class MyMoveToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppMoveTo command to validate its behavior and functionality. [TestClass] public class MyMoveToUnitTests Inheritance object MyMoveToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the AppMoveTo command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the AppMoveTo command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() Tests the constructor of the AppMoveTo command to ensure it throws a RestrictionException when coordinates exceed the limit. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyPenColourUnitTests.html": {
    "href": "api/ASE_Test_Project.MyPenColourUnitTests.html",
    "title": "Class MyPenColourUnitTests | ASE Assignment",
    "keywords": "Class MyPenColourUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppPenColour command to validate its behavior and functionality. [TestClass] public class MyPenColourUnitTests Inheritance object MyPenColourUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the AppPenColour command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the AppPenColour command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyRectangleUnitTests.html": {
    "href": "api/ASE_Test_Project.MyRectangleUnitTests.html",
    "title": "Class MyRectangleUnitTests | ASE Assignment",
    "keywords": "Class MyRectangleUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppRectangle command to validate its behavior and functionality. [TestClass] public class MyRectangleUnitTests Inheritance object MyRectangleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the AppRectangle command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the AppRectangle command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyResetsUnitTests.html": {
    "href": "api/ASE_Test_Project.MyResetsUnitTests.html",
    "title": "Class MyResetsUnitTests | ASE Assignment",
    "keywords": "Class MyResetsUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Reset command to validate its behavior and functionality. [TestClass] public class MyResetsUnitTests Inheritance object MyResetsUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests the CheckParameters method of the Reset command to ensure it ignores additional unexpected parameters. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests the CheckParameters method of the Reset command to ensure it does not throw exceptions for an empty parameter list. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests the CheckParameters method of the Reset command to ensure it does not throw exceptions for a null parameter list. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests the constructor of the Reset command to ensure it initializes correctly with a valid canvas. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() Tests the Execute method of the Reset command to ensure it throws a NullReferenceException when the canvas is null. [TestMethod] public void Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyStoredProgramUnitTests.html": {
    "href": "api/ASE_Test_Project.MyStoredProgramUnitTests.html",
    "title": "Class MyStoredProgramUnitTests | ASE Assignment",
    "keywords": "Class MyStoredProgramUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll [TestClass] public class MyStoredProgramUnitTests Inheritance object MyStoredProgramUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_AddVariable_Duplicate_ShouldNotStore() [TestMethod] public void Test_AddVariable_Duplicate_ShouldNotStore() Test_AddVariable_ShouldStoreVariable() [TestMethod] public void Test_AddVariable_ShouldStoreVariable() Test_EvaluateExpression_Invalid_ShouldThrowException() [TestMethod] public void Test_EvaluateExpression_Invalid_ShouldThrowException() Test_EvaluateExpression_ShouldReturnResult() [TestMethod] public void Test_EvaluateExpression_ShouldReturnResult() Test_InitializeProgram_ShouldSetDefaults() [TestMethod] public void Test_InitializeProgram_ShouldSetDefaults() Test_PopEmptyStack_ShouldThrowException() [TestMethod] public void Test_PopEmptyStack_ShouldThrowException() Test_PushPopConditionalCommands_ShouldHandleStack() [TestMethod] public void Test_PushPopConditionalCommands_ShouldHandleStack() Test_UpdateVariable_ShouldUpdateValue() [TestMethod] public void Test_UpdateVariable_ShouldUpdateValue()"
  },
  "api/ASE_Test_Project.MyTriangleTests.html": {
    "href": "api/ASE_Test_Project.MyTriangleTests.html",
    "title": "Class MyTriangleTests | ASE Assignment",
    "keywords": "Class MyTriangleTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Triangle command to validate its behavior and functionality. [TestClass] public class MyTriangleTests Inheritance object MyTriangleTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the Triangle command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the Triangle command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldSetBaseLengthAndHeightCorrectly() Verifies that baseLength and height are set correctly via the Triangle constructor. [TestMethod] public void Constructor_ShouldSetBaseLengthAndHeightCorrectly() Execute_ShouldThrowRestrictionException_WhenBaseLengthOrHeightExceeds2000() Tests the Execute method of the Triangle command to ensure it handles invalid dimensions by not calling the Tri method on the canvas. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenBaseLengthOrHeightExceeds2000() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyWriteToUnitTests.html": {
    "href": "api/ASE_Test_Project.MyWriteToUnitTests.html",
    "title": "Class MyWriteToUnitTests | ASE Assignment",
    "keywords": "Class MyWriteToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the WriteTo command to validate its behavior and functionality. [TestClass] public class MyWriteToUnitTests Inheritance object MyWriteToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParameterIsValid() Tests the CheckParameters method of the WriteTo command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParameterIsValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the WriteTo command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Tests the Execute method of the WriteTo command to ensure it handles overly long text by logging a RestrictionException. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Execute_ShouldThrowRestrictionException_WhenTextIsEmpty() Tests the Execute method of the WriteTo command to ensure it handles empty text by logging a RestrictionException. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsEmpty() Execute_ShouldThrowRestrictionException_WhenTextIsNull() Tests the Execute method of the WriteTo command to ensure it handles null text by logging a RestrictionException. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsNull() Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() Tests the Execute method of the WriteTo command to ensure it handles whitespace text by logging a RestrictionException. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.ParserTest.html": {
    "href": "api/ASE_Test_Project.ParserTest.html",
    "title": "Class ParserTest | ASE Assignment",
    "keywords": "Class ParserTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppPraser class to validate its command parsing and program parsing functionality. [TestClass] public class ParserTest Inheritance object ParserTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing the canvas, command factory, stored program, and parser instances. [TestInitialize] public void SetUp() TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() Tests the ParseCommand method to ensure it returns a valid command for a known command input. [TestMethod] public void TestParseCommand_ShouldReturnValidCommand_ForKnownCommand()"
  },
  "api/ASE_Test_Project.PenSizeUnitTests.html": {
    "href": "api/ASE_Test_Project.PenSizeUnitTests.html",
    "title": "Class PenSizeUnitTests | ASE Assignment",
    "keywords": "Class PenSizeUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the PenSize command to validate its behavior and functionality. [TestClass] public class PenSizeUnitTests Inheritance object PenSizeUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the PenSize command to ensure it does not throw exceptions for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the PenSize command to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldHandleBoundaryValue_Zero() Tests the Execute method of the PenSize command to ensure it handles boundary value zero correctly. [TestMethod] public void Execute_ShouldHandleBoundaryValue_Zero() TestInitialize() Initializes the test setup by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.html": {
    "href": "api/ASE_Test_Project.html",
    "title": "Namespace ASE_Test_Project | ASE Assignment",
    "keywords": "Namespace ASE_Test_Project Classes CommandFactoryTest Test class to verify the behavior of the AppCommandFactory and its command creation logic. CommandUnitTests GloabalCofigTest Test class for verifying the functionality of the GlobalConfig class. MyAppCanvasTest Test class for AppCanvas to validate its behavior and functionality. MyCircleUnitTests Unit tests for the AppCircle class to validate its behavior and functionality. MyClearUnitTests Unit tests for the Clear command to validate its behavior and functionality. MyDrawToUnitTests Unit tests for the AppDrawTo command to validate its behavior and functionality. MyFillUnitTests Unit tests for the Fill command to validate its behavior and functionality. MyMoveToUnitTests Unit tests for the AppMoveTo command to validate its behavior and functionality. MyPenColourUnitTests Unit tests for the AppPenColour command to validate its behavior and functionality. MyRectangleUnitTests Unit tests for the AppRectangle command to validate its behavior and functionality. MyResetsUnitTests Unit tests for the Reset command to validate its behavior and functionality. MyStoredProgramUnitTests MyTriangleTests Unit tests for the Triangle command to validate its behavior and functionality. MyWriteToUnitTests Unit tests for the WriteTo command to validate its behavior and functionality. ParserTest Unit tests for the AppPraser class to validate its command parsing and program parsing functionality. PenSizeUnitTests Unit tests for the PenSize command to validate its behavior and functionality."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Assignment",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Assignment",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Assignment",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}